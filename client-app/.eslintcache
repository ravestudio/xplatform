[{"C:\\projects\\git\\xplatform\\client-app\\src\\index.tsx":"1","C:\\projects\\git\\xplatform\\client-app\\src\\Theme.ts":"2","C:\\projects\\git\\xplatform\\client-app\\src\\serviceWorker.ts":"3","C:\\projects\\git\\xplatform\\client-app\\src\\store\\configureStore.ts":"4","C:\\projects\\git\\xplatform\\client-app\\src\\App.tsx":"5","C:\\projects\\git\\xplatform\\client-app\\src\\store\\index.ts":"6","C:\\projects\\git\\xplatform\\client-app\\src\\components\\blocks\\2Layout.tsx":"7","C:\\projects\\git\\xplatform\\client-app\\src\\components\\deals\\DealCreate.tsx":"8","C:\\projects\\git\\xplatform\\client-app\\src\\components\\portfolio\\Portfolio.tsx":"9","C:\\projects\\git\\xplatform\\client-app\\src\\components\\financials\\Financials.tsx":"10","C:\\projects\\git\\xplatform\\client-app\\src\\components\\deals\\Deals.tsx":"11","C:\\projects\\git\\xplatform\\client-app\\src\\components\\shares\\2Shares.tsx":"12","C:\\projects\\git\\xplatform\\client-app\\src\\components\\auth\\Login.tsx":"13","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Accounts.ts":"14","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Deals.ts":"15","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Portfolio.ts":"16","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Securities.ts":"17","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Financials.ts":"18","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Shares.ts":"19","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Auth.ts":"20","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Import.ts":"21","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Form.ts":"22","C:\\projects\\git\\xplatform\\client-app\\src\\components\\imageViewer\\index.tsx":"23","C:\\projects\\git\\xplatform\\client-app\\src\\components\\import\\index.tsx":"24","C:\\projects\\git\\xplatform\\client-app\\src\\components\\deals\\DealForm.tsx":"25","C:\\projects\\git\\xplatform\\client-app\\src\\components\\deals\\EditDealDialog.tsx":"26","C:\\projects\\git\\xplatform\\client-app\\src\\components\\import\\Financials.tsx":"27","C:\\projects\\git\\xplatform\\client-app\\src\\components\\import\\Securities.tsx":"28","C:\\projects\\git\\xplatform\\client-app\\src\\components\\dropdown\\index.tsx":"29","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Positions.ts":"30","C:\\projects\\git\\xplatform\\client-app\\src\\components\\positions\\Positions.tsx":"31"},{"size":1212,"mtime":1623642860796,"results":"32","hashOfConfig":"33"},{"size":244,"mtime":1623642860781,"results":"34","hashOfConfig":"33"},{"size":5444,"mtime":1623642860796,"results":"35","hashOfConfig":"33"},{"size":992,"mtime":1623642860796,"results":"36","hashOfConfig":"33"},{"size":2015,"mtime":1643216740275,"results":"37","hashOfConfig":"33"},{"size":1316,"mtime":1643215593094,"results":"38","hashOfConfig":"33"},{"size":324,"mtime":1623642860781,"results":"39","hashOfConfig":"33"},{"size":3055,"mtime":1623642860781,"results":"40","hashOfConfig":"33"},{"size":2111,"mtime":1643216592445,"results":"41","hashOfConfig":"33"},{"size":13277,"mtime":1625347041487,"results":"42","hashOfConfig":"33"},{"size":5315,"mtime":1623642860781,"results":"43","hashOfConfig":"33"},{"size":4473,"mtime":1623642860796,"results":"44","hashOfConfig":"33"},{"size":1722,"mtime":1623642860781,"results":"45","hashOfConfig":"33"},{"size":699,"mtime":1623642860796,"results":"46","hashOfConfig":"33"},{"size":2374,"mtime":1623642860796,"results":"47","hashOfConfig":"33"},{"size":2188,"mtime":1623642860796,"results":"48","hashOfConfig":"33"},{"size":2027,"mtime":1623642860796,"results":"49","hashOfConfig":"33"},{"size":1879,"mtime":1625340178144,"results":"50","hashOfConfig":"33"},{"size":2085,"mtime":1623642860796,"results":"51","hashOfConfig":"33"},{"size":1329,"mtime":1623642860796,"results":"52","hashOfConfig":"33"},{"size":4390,"mtime":1623642860796,"results":"53","hashOfConfig":"33"},{"size":216,"mtime":1623642860796,"results":"54","hashOfConfig":"33"},{"size":666,"mtime":1623642860781,"results":"55","hashOfConfig":"33"},{"size":3911,"mtime":1623642860781,"results":"56","hashOfConfig":"33"},{"size":10694,"mtime":1623642860781,"results":"57","hashOfConfig":"33"},{"size":2686,"mtime":1623642860781,"results":"58","hashOfConfig":"33"},{"size":2521,"mtime":1623642860781,"results":"59","hashOfConfig":"33"},{"size":2185,"mtime":1623642860781,"results":"60","hashOfConfig":"33"},{"size":2321,"mtime":1623642860781,"results":"61","hashOfConfig":"33"},{"size":3482,"mtime":1644166855570,"results":"62","hashOfConfig":"33"},{"size":6414,"mtime":1644166921730,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1jacluq",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"66"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"66"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"C:\\projects\\git\\xplatform\\client-app\\src\\index.tsx",[],["144","145"],"C:\\projects\\git\\xplatform\\client-app\\src\\Theme.ts",[],"C:\\projects\\git\\xplatform\\client-app\\src\\serviceWorker.ts",[],"C:\\projects\\git\\xplatform\\client-app\\src\\store\\configureStore.ts",["146"],"import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { connectRouter, routerMiddleware } from \"connected-react-router\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport { History } from \"history\";\r\nimport { ApplicationState, reducers } from \"./\";\r\n\r\nexport default function configureStore(history: History, initialState?: any) {\r\n  const middleware = [thunk, routerMiddleware(history)];\r\n\r\n  const enhancers = [];\r\n  const windowIfDefined =\r\n    typeof window === \"undefined\" ? null : (window as any);\r\n  if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n    enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n  }\r\n\r\n  const rootReducer = combineReducers({\r\n    ...reducers,\r\n    router: connectRouter(history),\r\n    form: formReducer,\r\n  });\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(applyMiddleware(...middleware), ...enhancers)\r\n  );\r\n}\r\n","C:\\projects\\git\\xplatform\\client-app\\src\\App.tsx",["147","148","149"],"import React from \"react\";\r\nimport { Switch, Route } from \"react-router\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Layout from \"./components/blocks/2Layout\";\r\nimport Emitents from \"./components/emitents/Emitents\";\r\nimport Deals from \"./components/deals/Deals\";\r\nimport DealCreate from \"./components/deals/DealCreate\";\r\nimport Portfolio from \"./components/portfolio/Portfolio\";\r\nimport Positions from \"./components/positions/Positions\";\r\nimport Financials from \"./components/financials/Financials\";\r\nimport Shares from \"./components/shares/2Shares\";\r\nimport ImportSecurities from \"./components/import\";\r\nimport ImgViewer from \"./components/imageViewer\";\r\nimport Auth from \"./components/auth/Login\";\r\n\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport ruLocale from \"date-fns/locale/ru\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { ApplicationState } from \"./store\";\r\n\r\nexport default connect((state: ApplicationState) => ({\r\n  loggedIn: state.auth?.token !== undefined,\r\n}))((props: { loggedIn: boolean }) => (\r\n  <Layout>\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils} locale={ruLocale}>\r\n      {props.loggedIn && (\r\n        <div>\r\n          <div>\r\n            <Link to={\"/\"}>Home</Link>\r\n          </div>\r\n          <div>\r\n            <Link to={\"portfolio\"}>Portfolio</Link>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <Route exact path=\"/\" component={Shares} />\r\n\r\n      <Route path=\"/deals\" component={Deals} />\r\n      <Route path=\"/createDeal\" component={DealCreate} />\r\n      <Route path=\"/portfolio\" component={Portfolio} />\r\n      <Route path=\"/positions\" component={Positions} />\r\n      <Route path=\"/financials/:code?\" component={Financials} />\r\n      <Route path=\"/import\" component={ImportSecurities} />\r\n      <Route path=\"/img\" component={ImgViewer} />\r\n      <Route path=\"/auth\" component={Auth} />\r\n    </MuiPickersUtilsProvider>\r\n  </Layout>\r\n));\r\n","C:\\projects\\git\\xplatform\\client-app\\src\\store\\index.ts",[],"C:\\projects\\git\\xplatform\\client-app\\src\\components\\blocks\\2Layout.tsx",["150","151","152","153"],"import * as React from \"react\";\r\n\r\nimport \"../../index.scss\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nexport default (props: { children?: React.ReactNode }) => {\r\n  const [value, setValue] = React.useState(null);\r\n  return (\r\n    <div className=\"root\">\r\n      <div className=\"container\">{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\projects\\git\\xplatform\\client-app\\src\\components\\deals\\DealCreate.tsx",["154","155","156","157"],"import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport * as SecuritiesStore from '../../store/Securities'\r\nimport * as DealStore from '../../store/Deals'\r\nimport { Paper } from '@material-ui/core'\r\nimport { Security } from '../../store/Securities'\r\nimport { Account } from '../../store/Accounts'\r\nimport { Deal } from '../../store/Deals'\r\nimport { ApplicationState } from '../../store'\r\nimport { createStyles, makeStyles, Theme, withStyles } from '@material-ui/core/styles';\r\nimport DealForm from './DealForm'\r\n\r\nimport { format, parseISO, addHours } from 'date-fns'\r\n\r\ninterface EditDealDialogProps {\r\n    securities: Security[],\r\n    accounts: Account[],\r\n    classes: {\r\n        root: string\r\n    }\r\n}\r\n\r\nconst styles = (theme: Theme) =>({\r\n    root: {\r\n            /*'& .MuiGrid-item': {\r\n                width: 200,\r\n            },*/\r\n        },\r\n})\r\n\r\nclass DealCreate extends React.PureComponent<EditDealDialogProps\r\n        & typeof SecuritiesStore.actionCreators\r\n        & typeof DealStore.actionCreators> {\r\n\r\n    public componentDidMount() {\r\n        this.props.requestSecurities();\r\n    }\r\n\r\n    submit = (values:any) => {\r\n        // print the form values to the console\r\n        console.log(values)\r\n\r\n        const toMSK = (iso_dt: string): string => {\r\n\r\n            const zoned = parseISO(iso_dt)\r\n            const offset = zoned.getTimezoneOffset() / 60\r\n\r\n            return addHours(zoned, -(offset + 3)).toISOString()\r\n        }\r\n\r\n        const date = parseISO(values['dealDate'])\r\n        const time = parseISO(values['dealTime'])\r\n\r\n        const dateTime = new Date(`${format(date, 'yyyy-MM-dd')}T${format(time, 'HH:mm')}`).toISOString()\r\n\r\n        const deal = ({\r\n            accountId: values['dealAccount'],\r\n            number: parseInt(values['dealNumber']),\r\n            operation: parseInt(values['dealOperation']),\r\n            securityId: values['dealSecurity'],\r\n            date: toMSK(dateTime),\r\n            deliveryDate: toMSK(values['deliveryDate']),\r\n            price: parseFloat(values['dealPrice']),\r\n            count: parseInt(values['dealCount']),\r\n            volume: parseFloat(values['dealVolume']),\r\n            nkd: parseFloat(values['dealNkd'])\r\n        })\r\n\r\n        this.props.postDeal(deal)\r\n    }\r\n\r\n    public render() {\r\n\r\n        return (\r\n            <Paper>\r\n                <DealForm\r\n\r\n                    onSubmit={this.submit} />\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n\r\nlet dealForm = reduxForm({\r\n    // a unique name for the form\r\n    form: 'deal'\r\n})(DealCreate as any)\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => ({\r\n        securities: state.securities?.securities,\r\n        accounts: state.accounts?.accounts\r\n    }),\r\n    (dispatch) => bindActionCreators({\r\n        requestSecurities: SecuritiesStore.actionCreators.requestSecurities,\r\n        postDeal: DealStore.actionCreators.postDeal\r\n    }, dispatch)\r\n)(withStyles(styles)(dealForm as any));","C:\\projects\\git\\xplatform\\client-app\\src\\components\\portfolio\\Portfolio.tsx",[],"C:\\projects\\git\\xplatform\\client-app\\src\\components\\financials\\Financials.tsx",[],"C:\\projects\\git\\xplatform\\client-app\\src\\components\\deals\\Deals.tsx",[],"C:\\projects\\git\\xplatform\\client-app\\src\\components\\shares\\2Shares.tsx",[],"C:\\projects\\git\\xplatform\\client-app\\src\\components\\auth\\Login.tsx",["158","159","160","161","162"],"import * as React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\nimport { Field, change, reduxForm, formValueSelector } from \"redux-form\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport * as AuthStore from \"../../store/Auth\";\r\n\r\ninterface TFProps {\r\n  label: any;\r\n  input: any;\r\n  meta: any;\r\n  custom: any;\r\n}\r\n\r\nconst renderTextField: React.FC<TFProps> = (props) => {\r\n  const {\r\n    input,\r\n    label,\r\n    meta: { touched, invalid, error },\r\n    ...custom\r\n  } = props;\r\n  return (\r\n    <div>\r\n      <label>{label}</label>\r\n      <div>\r\n        <input placeholder={label} {...input} {...custom} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype AuthProps = AuthStore.AuthState & typeof AuthStore.actionCreators;\r\n\r\nconst LoginForm = reduxForm({\r\n  // a unique name for the form\r\n  form: \"authForm\",\r\n})((props: any) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        fullWidth\r\n        name=\"userName\"\r\n        component={renderTextField}\r\n        label=\"User Name\"\r\n      />\r\n\r\n      <Field\r\n        fullWidth\r\n        name=\"password\"\r\n        component={renderTextField}\r\n        label=\"Password\"\r\n      />\r\n\r\n      <div>\r\n        <button type=\"submit\">Submit</button>\r\n      </div>\r\n    </form>\r\n  );\r\n});\r\n\r\nconst Login = (props: AuthProps) => {\r\n  const onSubmit = (values: any) => {\r\n    props.Login(values.userName, values.password);\r\n  };\r\n\r\n  return <LoginForm onSubmit={onSubmit} />;\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return bindActionCreators(AuthStore.actionCreators, dispatch);\r\n};\r\n\r\nexport default connect(\r\n  (state: ApplicationState) => state.auth,\r\n  mapDispatchToProps\r\n)(Login);\r\n","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Accounts.ts",[],"C:\\projects\\git\\xplatform\\client-app\\src\\store\\Deals.ts",["163","164"],"import { Action, Reducer } from 'redux';\r\nimport { reset } from 'redux-form';\r\nimport { AppThunkAction } from './';\r\n\r\nexport interface DealsState {\r\n    isLoading: boolean\r\n    deals: Deal[]\r\n}\r\n\r\nexport interface Deal {\r\n    id: number\r\n    accountId: number\r\n    number: number\r\n    operation: number\r\n    date: string\r\n    deliveryDate: string\r\n    price: number\r\n    count: number\r\n    volume: number\r\n    securityId: number\r\n    nkd: number\r\n}\r\n\r\ninterface RequestDealsAction {\r\n    type: 'DEALS_REQUEST'\r\n}\r\n\r\ninterface ReceiveDealsAction {\r\n    type: 'DEALS_RECEIVE',\r\n    deals: Deal[]\r\n}\r\n\r\ntype KnownAction = ReceiveDealsAction | RequestDealsAction;\r\n\r\nexport const actionCreators = {\r\n    requestDeals: (): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n\r\n        fetch(`/api/deal`)\r\n            .then(response => response.json() as Promise<Deal[]>)\r\n            .then(data => {\r\n                dispatch({ type: 'DEALS_RECEIVE', deals: data });\r\n            });\r\n\r\n        dispatch({ type: 'DEALS_REQUEST' });\r\n    },\r\n\r\n    postDeal: (deal: any): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n\r\n        fetch(`/api/deal`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(deal),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(response => {\r\n                console.log(response.status)\r\n\r\n                if (response.status == 200) {\r\n                    dispatch(reset('dealForm'))\r\n                }\r\n            })\r\n        /*.then(response => response.json() as Promise<any>)\r\n        .then(data => {\r\n            console.log(data)\r\n        });*/\r\n        \r\n        console.log(deal)\r\n    }\r\n};\r\n\r\nconst unloadedState: DealsState = {\r\n    deals: [], isLoading: false\r\n};\r\n\r\nexport const reducer: Reducer<DealsState> = (state: DealsState | undefined, incomingAction: Action): DealsState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction\r\n\r\n    switch (action.type) {\r\n        case 'DEALS_REQUEST':\r\n            return { ...state, isLoading: true }\r\n        case 'DEALS_RECEIVE':\r\n            return {\r\n                deals: action.deals,\r\n                isLoading: false\r\n            }\r\n        default: return state\r\n    }\r\n}","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Portfolio.ts",[],"C:\\projects\\git\\xplatform\\client-app\\src\\store\\Securities.ts",["165"],"import { Action, Reducer } from 'redux'\r\nimport { AppThunkAction } from './';\r\n\r\nexport interface SecuritiesState {\r\n    isLoading: boolean\r\n    securities: Security[]\r\n}\r\n\r\nexport interface Security {\r\n    id: number,\r\n    name: string,\r\n    type: string\r\n}\r\n\r\nexport interface Share extends Security {\r\n\r\n}\r\n\r\nexport interface Bond extends Security {\r\n    nominalPrice: number\r\n}\r\n\r\ninterface RequestSecurityAction {\r\n    type: 'SECURITY_REQUEST'\r\n}\r\n\r\ninterface ReceiveSecurityAction {\r\n    type: 'SECURITY_RECEIVE',\r\n    securities: Security[]\r\n}\r\n\r\ntype KnownAction = RequestSecurityAction | ReceiveSecurityAction;\r\n\r\nexport const actionCreators = {\r\n    requestSecurities: (): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n\r\n        const shares = fetch(`/api/share`)\r\n            .then(response => response.json() as Promise<Security[]>);\r\n\r\n        const bonds = fetch(`/api/bond`)\r\n            .then(response => response.json() as Promise<Security[]>);\r\n\r\n        const etf = fetch(`/api/etf`)\r\n            .then(response => response.json() as Promise<Security[]>);\r\n\r\n        Promise.all([shares, bonds, etf]).then(([shares, bonds, etf]) => {\r\n            dispatch({ type: 'SECURITY_RECEIVE', securities: [...shares, ...bonds, ...etf] });\r\n        })\r\n\r\n\r\n        dispatch({ type: 'SECURITY_REQUEST' });\r\n    }\r\n};\r\n\r\nconst unloadedState: SecuritiesState = {\r\n    securities: [], isLoading: false\r\n};\r\n\r\nexport const reducer: Reducer<SecuritiesState> = (state: SecuritiesState | undefined, incomingAction: Action): SecuritiesState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction\r\n\r\n    switch (action.type) {\r\n        case 'SECURITY_REQUEST':\r\n            return { ...state, isLoading: true }\r\n        case 'SECURITY_RECEIVE':\r\n            return {\r\n                securities: action.securities,\r\n                isLoading: false\r\n            }\r\n        default: return state\r\n    }\r\n\r\n}","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Financials.ts",[],"C:\\projects\\git\\xplatform\\client-app\\src\\store\\Shares.ts",["166"],"import { Action, Reducer } from 'redux'\r\nimport { AppThunkAction } from './';\r\n\r\nexport interface SharesState {\r\n    isLoading: boolean,\r\n    region?: string,\r\n    shares: ShareInfo[]\r\n}\r\n\r\nexport interface ShareInfo {\r\n    code: string,\r\n    emitent: string,\r\n    currency: string,\r\n    price?: number,\r\n    priceChange?: number,\r\n    financialPage?: string\r\n}\r\n\r\nexport interface PriceValues {\r\n    code: string;\r\n    lastPrice: number;\r\n    change: number\r\n}\r\n\r\ninterface RequestShareInfoAction {\r\n    type: 'SHARESINFO_REQUEST',\r\n    region: string\r\n}\r\n\r\ninterface ReceiveShareInfoAction {\r\n    type: 'SHARESINFO_RECEIVE',\r\n    region: string,\r\n    shares: ShareInfo[]\r\n}\r\n\r\n\r\ntype KnownAction = RequestShareInfoAction | ReceiveShareInfoAction;\r\n\r\nexport const actionCreators = {\r\n    requestShareInfo: (region: string): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n\r\n        //const region = 'United States'\r\n\r\n        fetch(`/api/sharesInfo?region=${region}`)\r\n            .then(response => response.json() as Promise<ShareInfo[]>)\r\n            .then(data => {\r\n                dispatch({ type: 'SHARESINFO_RECEIVE', region: region, shares: data });\r\n            });\r\n\r\n        dispatch({ type: 'SHARESINFO_REQUEST', region: region });\r\n    }\r\n};\r\n\r\nconst unloadedState: SharesState = {\r\n    region: 'Moscow',\r\n    shares: [],\r\n    isLoading: false\r\n};\r\n\r\nexport const reducer: Reducer<SharesState> = (state: SharesState | undefined, incomingAction: Action): SharesState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction\r\n\r\n    switch (action.type) {\r\n        case 'SHARESINFO_REQUEST':\r\n            return {\r\n                ...state,\r\n                region: action.region,\r\n                isLoading: true\r\n            }\r\n        case 'SHARESINFO_RECEIVE':\r\n            return {\r\n                region: action.region,\r\n                shares: action.shares,\r\n                isLoading: false\r\n            }\r\n        default: return state\r\n    }\r\n}","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Auth.ts",[],"C:\\projects\\git\\xplatform\\client-app\\src\\store\\Import.ts",["167","168","169","170","171","172","173"],"import { Action, Reducer } from \"redux\";\r\n\r\nimport { AppThunkAction } from \"./\";\r\n\r\nimport { parseISO } from \"date-fns\";\r\n\r\nexport interface ImportState {\r\n  isLoading: boolean;\r\n  importType?: string;\r\n\r\n  securities: Security[];\r\n  yahooFinancials: YahooFinancial[];\r\n}\r\n\r\nexport interface Security {\r\n  id: string;\r\n  isin: string;\r\n  ticker: string;\r\n  currency: string;\r\n  name: string;\r\n  board: string;\r\n  emitent: string;\r\n  processed: boolean;\r\n}\r\n\r\nexport interface YahooFinancial {\r\n  id: string;\r\n  code: string;\r\n  name: string;\r\n  loadDate?: Date;\r\n  lastFinance?: Date;\r\n  status: string;\r\n}\r\n\r\ninterface RequestDataAction {\r\n  type: \"IMPORT/DATA_REQUEST\";\r\n  importType: string;\r\n}\r\n\r\ninterface ReceiveDataAction {\r\n  type: \"IMPORT/DATA_RECEIVE\";\r\n  importType: string;\r\n  payload: any;\r\n}\r\n\r\ntype KnownAction = RequestDataAction | ReceiveDataAction;\r\n\r\nexport const actionCreators = {\r\n  RequestDataAction: (importType: string): AppThunkAction<KnownAction> => (\r\n    dispatch,\r\n    getState\r\n  ) => {\r\n    const appState = getState();\r\n\r\n    if (importType == \"stock\") {\r\n      fetch(`/api/SecurityRaw`)\r\n        .then((response) => response.json())\r\n        .then((payload) => {\r\n          dispatch({ type: \"IMPORT/DATA_RECEIVE\", importType, payload });\r\n        });\r\n    }\r\n\r\n    if (importType == \"financial\") {\r\n      fetch(`/api/Yahoo`)\r\n        .then((response) => response.json())\r\n        .then((payload) => {\r\n          dispatch({ type: \"IMPORT/DATA_RECEIVE\", importType, payload });\r\n        });\r\n    }\r\n\r\n    dispatch({ type: \"IMPORT/DATA_REQUEST\", importType });\r\n  },\r\n\r\n  ImportDataAction: (\r\n    importType: string,\r\n    isin: string[]\r\n  ): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n    if (importType == \"stock\") {\r\n      fetch(`/api/Import`, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          object: \"stock\",\r\n          isin,\r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }).then((response) => {\r\n        console.log(response.status);\r\n      });\r\n    }\r\n\r\n    if (importType == \"financial\") {\r\n      fetch(`/api/Yahoo`, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          Type: \"init\",\r\n          Codes: isin,\r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }).then((response) => {\r\n        console.log(response.status);\r\n      });\r\n    }\r\n  },\r\n\r\n  ProcessData: (code: string[]): AppThunkAction<KnownAction> => (\r\n    dispatch,\r\n    getState\r\n  ) => {\r\n    fetch(`/api/Yahoo`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        Type: \"process\",\r\n        Codes: code,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }).then((response) => {\r\n      console.log(response.status);\r\n    });\r\n  },\r\n\r\n  RefreshList: (): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n    fetch(`/api/SecurityRaw`, {\r\n      method: \"POST\",\r\n    }).then((response) => {\r\n      console.log(response.status);\r\n    });\r\n  },\r\n};\r\n\r\nconst unloadedState: ImportState = {\r\n  importType: \"stock\",\r\n  securities: [],\r\n  yahooFinancials: [],\r\n  isLoading: false,\r\n};\r\n\r\nexport const reducer: Reducer<ImportState> = (\r\n  state: ImportState | undefined,\r\n  incomingAction: Action\r\n): ImportState => {\r\n  if (state === undefined) {\r\n    return unloadedState;\r\n  }\r\n\r\n  const action = incomingAction as KnownAction;\r\n\r\n  switch (action.type) {\r\n    case \"IMPORT/DATA_REQUEST\":\r\n      return {\r\n        ...state,\r\n        importType: action.importType,\r\n        isLoading: true,\r\n      };\r\n    case \"IMPORT/DATA_RECEIVE\":\r\n      return {\r\n        ...state,\r\n        importType: action.importType,\r\n        securities:\r\n          action.importType == \"stock\"\r\n            ? action.payload.map((item: any) => ({ ...item, id: item.isin }))\r\n            : [],\r\n        yahooFinancials:\r\n          action.importType == \"financial\"\r\n            ? action.payload.map((item: any) => ({\r\n                ...item,\r\n                id: item.code,\r\n                loadDate:\r\n                  item.loadDate !== null ? parseISO(item.loadDate) : null,\r\n                lastFinance:\r\n                  item.lastFinance !== null ? parseISO(item.lastFinance) : null,\r\n              }))\r\n            : [],\r\n        isLoading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\projects\\git\\xplatform\\client-app\\src\\store\\Form.ts",[],"C:\\projects\\git\\xplatform\\client-app\\src\\components\\imageViewer\\index.tsx",["174","175","176","177","178"],"import React, { useState, useRef, useEffect } from \"react\";\r\n\r\ninterface IViewerProps {}\r\n\r\nconst ImageViewer: React.FC<IViewerProps> = ({}) => {\r\n  const ref = React.createRef<HTMLImageElement>();\r\n\r\n  function zoom(e: React.WheelEvent<HTMLImageElement>) {\r\n    console.log(e.deltaY);\r\n\r\n    ref.current?.setAttribute(\"style\", \"width: 100%;transform: scale(0.5)\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"imageViewer\">\r\n      <img\r\n        ref={ref}\r\n        src=\"https://i.pinimg.com/originals/3b/8a/d2/3b8ad2c7b1be2caf24321c852103598a.jpg\"\r\n        style={{ width: \"100%\" }}\r\n        onWheel={zoom}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageViewer;\r\n","C:\\projects\\git\\xplatform\\client-app\\src\\components\\import\\index.tsx",["179","180","181","182","183","184","185","186","187","188","189"],"import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport clsx from \"clsx\";\r\n\r\nimport {\r\n  Button,\r\n  createStyles,\r\n  FormControl,\r\n  MenuItem,\r\n  Select,\r\n  Theme,\r\n  withStyles,\r\n  WithStyles,\r\n} from \"@material-ui/core\";\r\n\r\nimport { CellClassParams, ColDef, DataGrid } from \"@material-ui/data-grid\";\r\n\r\nimport { ApplicationState } from \"../../store\";\r\nimport * as ImportStore from \"../../store/Import\";\r\nimport { styled as Securities } from \"./Securities\";\r\nimport { styled as Financials } from \"./Financials\";\r\nimport { bindActionCreators, compose } from \"redux\";\r\n\r\ninterface IState {\r\n  selected: string[];\r\n}\r\n\r\ntype IDispatchProps = typeof ImportStore.actionCreators;\r\n\r\ntype ImportProps = ImportStore.ImportState & IDispatchProps;\r\n\r\nclass ImportSecurities extends React.Component<ImportProps, IState> {\r\n  constructor(props: ImportProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selected: [],\r\n    };\r\n\r\n    this.ImportSelected = this.ImportSelected.bind(this);\r\n    this.ProcessSelected = this.ProcessSelected.bind(this);\r\n\r\n    this.handleImportTypeChange = this.handleImportTypeChange.bind(this);\r\n  }\r\n\r\n  public componentDidMount() {\r\n    if (this.props.importType !== undefined) {\r\n      this.props.RequestDataAction(this.props.importType);\r\n    }\r\n  }\r\n\r\n  private ImportSelected() {\r\n    if (this.props.importType === undefined) return;\r\n\r\n    this.props.ImportDataAction(this.props.importType, this.state.selected);\r\n  }\r\n\r\n  private ProcessSelected() {\r\n    this.props.ProcessData(this.state.selected);\r\n  }\r\n\r\n  private handleImportTypeChange(event: React.ChangeEvent<{ value: unknown }>) {\r\n    this.props.RequestDataAction(event.target.value as string);\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <FormControl>\r\n            <Select\r\n              value={this.props.importType}\r\n              onChange={this.handleImportTypeChange}\r\n              displayEmpty\r\n              inputProps={{ \"aria-label\": \"Without label\" }}\r\n            >\r\n              <MenuItem value={\"stock\"}>Stocks</MenuItem>\r\n              <MenuItem value={\"financial\"}>Yahoo Finance</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n\r\n        {this.props.isLoading && <span>Loading...</span>}\r\n\r\n        {this.props.isLoading === false && this.props.importType == \"stock\" && (\r\n          <Securities\r\n            securities={this.props.securities}\r\n            onSelectionChange={(newSelection) => {\r\n              this.setState({\r\n                selected: newSelection,\r\n              });\r\n            }}\r\n          />\r\n        )}\r\n\r\n        {this.props.isLoading === false &&\r\n          this.props.importType == \"financial\" && (\r\n            <Financials\r\n              financials={this.props.yahooFinancials}\r\n              onSelectionChange={(newSelection) => {\r\n                this.setState({\r\n                  selected: newSelection,\r\n                });\r\n              }}\r\n            />\r\n          )}\r\n\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={this.ImportSelected}\r\n          >\r\n            Import Selected\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={this.ProcessSelected}\r\n          >\r\n            Process Selected\r\n          </Button>\r\n\r\n          <Button color=\"primary\" onClick={this.props.RefreshList}>\r\n            Refresh List\r\n          </Button>\r\n        </div>\r\n\r\n        {this.state.selected.map((item) => (\r\n          <div>{item}</div>\r\n        ))}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return bindActionCreators(ImportStore.actionCreators, dispatch);\r\n};\r\n\r\nexport default connect(\r\n  (state: ApplicationState) => state.import,\r\n\r\n  mapDispatchToProps\r\n)(ImportSecurities);\r\n","C:\\projects\\git\\xplatform\\client-app\\src\\components\\deals\\DealForm.tsx",["190","191","192","193","194","195","196","197","198","199","200"],"import React, { useState, useEffect } from \"react\";\r\nimport { Field, change, reduxForm, formValueSelector } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { green, red } from \"@material-ui/core/colors\";\r\nimport Radio, { RadioProps } from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport {\r\n  createStyles,\r\n  makeStyles,\r\n  Theme,\r\n  withStyles,\r\n} from \"@material-ui/core/styles\";\r\nimport { KeyboardDatePicker, KeyboardTimePicker } from \"@material-ui/pickers\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { SecuritiesState, Security, Share, Bond } from \"../../store/Securities\";\r\n\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport {renderTextField} from \"xplatform-controls\"\r\n\r\ninterface NumberFormatCustomProps {\r\n  inputRef: (instance: NumberFormat | null) => void;\r\n  //onChange: (event: { target: { value: string } }) => void;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nfunction NumberFormatCustom(props: NumberFormatCustomProps) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange(values.value);\r\n      }}\r\n      isNumericString\r\n    />\r\n  );\r\n}\r\n\r\n/*const renderTextField: React.FC<TFProps> = (props) => {\r\n  const {\r\n    input,\r\n    label,\r\n    meta: { touched, invalid, error },\r\n    ...custom\r\n  } = props;\r\n  return (\r\n    <TextField\r\n      label={label}\r\n      placeholder={label}\r\n      error={touched && invalid}\r\n      helperText={touched && error}\r\n      {...input}\r\n      {...custom}\r\n    />\r\n  );\r\n};*/\r\n\r\nconst GreenRadio = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    \"&$checked\": {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})((props: RadioProps) => <Radio color=\"default\" {...props} />);\r\n\r\nconst RedRadio = withStyles({\r\n  root: {\r\n    color: red[400],\r\n    \"&$checked\": {\r\n      color: red[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})((props: RadioProps) => <Radio color=\"default\" {...props} />);\r\n\r\n\r\n\r\ninterface SelectProps {\r\n  label: any;\r\n  input: any;\r\n  meta: any;\r\n  children: any;\r\n  custom: any;\r\n}\r\n\r\nconst renderSelectField: React.FC<SelectProps> = (props) => {\r\n  const {\r\n    input,\r\n    label,\r\n    meta: { touched, error },\r\n    children,\r\n    ...custom\r\n  } = props;\r\n\r\n  return (\r\n    <FormControl error={touched && error} {...custom}>\r\n      <InputLabel htmlFor=\"age-native-simple\">{label}</InputLabel>\r\n      <Select\r\n        {...input}\r\n        inputProps={{\r\n          name: \"age\",\r\n          id: \"age-native-simple\",\r\n        }}\r\n      >\r\n        {children}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\ntype OperProps = {\r\n  input: any;\r\n  rest: any;\r\n};\r\n\r\nconst radioButton = ({ input, ...rest }: OperProps) => (\r\n  <FormControl>\r\n    <FormLabel component=\"legend\">Operation</FormLabel>\r\n    <RadioGroup {...input} {...rest} defaultValue=\"1\">\r\n      <FormControlLabel\r\n        value=\"1\"\r\n        control={<GreenRadio />}\r\n        label=\"Buy\"\r\n        labelPlacement=\"end\"\r\n      />\r\n      <FormControlLabel\r\n        value=\"2\"\r\n        control={<Radio />}\r\n        label=\"Sell\"\r\n        labelPlacement=\"end\"\r\n      />\r\n    </RadioGroup>\r\n  </FormControl>\r\n);\r\n\r\nconst DateField = (props: any) => {\r\n  const {\r\n    meta: { submitting, error, touched },\r\n    input: { onBlur, value, ...inputProps },\r\n    ...others\r\n  } = props;\r\n\r\n  const onChange = (date: any) => {\r\n    Date.parse(date)\r\n      ? inputProps.onChange(date.toISOString())\r\n      : inputProps.onChange(null);\r\n  };\r\n\r\n  return (\r\n    <KeyboardDatePicker\r\n      {...inputProps}\r\n      {...others}\r\n      disableToolbar\r\n      format=\"dd/MM/yyyy\"\r\n      value={value ? new Date(value) : null}\r\n      disabled={submitting}\r\n      onBlur={() => onBlur(value ? new Date(value).toISOString() : null)}\r\n      error={error && touched}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nconst TimeField = (props: any) => {\r\n  const {\r\n    meta: { submitting, error, touched },\r\n    input: { onBlur, value, ...inputProps },\r\n    ...others\r\n  } = props;\r\n\r\n  const onChange = (date: any) => {\r\n    Date.parse(date)\r\n      ? inputProps.onChange(date.toISOString())\r\n      : inputProps.onChange(null);\r\n  };\r\n\r\n  return (\r\n    <KeyboardTimePicker\r\n      {...inputProps}\r\n      {...others}\r\n      disableToolbar\r\n      value={value ? new Date(value) : null}\r\n      disabled={submitting}\r\n      onBlur={() => onBlur(value ? new Date(value).toISOString() : null)}\r\n      error={error && touched}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nconst required = (value: any) =>\r\n  value || typeof value === \"number\" ? undefined : \"Required\";\r\n\r\nconst DealForm = (props: any) => {\r\n  const { handleSubmit, accounts = [], securities = [] } = props;\r\n\r\n  //props.touch(\"dealNumber\");\r\n\r\n  const [value, setValue] = React.useState<number>(0);\r\n  const [value2, setValue2] = React.useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    console.log(\"change\");\r\n\r\n    props.dispatch(change(\"dealForm\", \"dealVolume\", value));\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"change\");\r\n\r\n    props.dispatch(change(\"dealForm\", \"dealVolume\", value2));\r\n  }, [value2]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Grid container justify=\"flex-start\" spacing={3}>\r\n        <Grid item xs={3}>\r\n          <Field\r\n            fullWidth\r\n            name=\"dealNumber\"\r\n            component={renderTextField}\r\n            label=\"Number\"\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n            validate={required}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            name=\"dealAccount\"\r\n            component={renderSelectField}\r\n            label=\"Account\"\r\n            fullWidth\r\n          >\r\n            {accounts.map((s: any) => (\r\n              <MenuItem key={s.id} value={s.id}>\r\n                {s.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Field>\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            name=\"dealSecurity\"\r\n            component={renderSelectField}\r\n            label=\"Security\"\r\n            fullWidth\r\n          >\r\n            {securities.map((s: any) => (\r\n              <MenuItem key={s.id} value={s.id}>\r\n                {s.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Field>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container justify=\"flex-start\" spacing={3}>\r\n        <Grid item xs={3}>\r\n          <Field name=\"dealOperation\" component={radioButton} row />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container justify=\"flex-start\" spacing={3}>\r\n        <Grid item xs={3}>\r\n          <Field\r\n            name=\"dealDate\"\r\n            component={DateField}\r\n            fullWidth\r\n            label=\"Deal Date\"\r\n            variant=\"inline\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            name=\"dealTime\"\r\n            component={TimeField}\r\n            ampm={false}\r\n            variant=\"inline\"\r\n            fullWidth\r\n            label=\"Deal Time\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            name=\"deliveryDate\"\r\n            component={DateField}\r\n            fullWidth\r\n            label=\"Delivery Date\"\r\n            variant=\"inline\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container justify=\"flex-start\" spacing={3}>\r\n        <Grid item xs={3}>\r\n          <Field\r\n            fullWidth\r\n            name=\"dealPrice\"\r\n            component={renderTextField}\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n            label=\"Price\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            fullWidth\r\n            name=\"dealCount\"\r\n            component={renderTextField}\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n            label=\"Count\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            fullWidth\r\n            name=\"dealNkd\"\r\n            component={renderTextField}\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n            label=\"NKD\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container justify=\"flex-start\" spacing={3}>\r\n        <Grid item xs={6}>\r\n          {props.nominalPrice ? `nominal price:${props.nominalPrice}` : null}\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            fullWidth\r\n            disabled\r\n            name=\"dealVolume\"\r\n            component={renderTextField}\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n            label=\"Volume\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <div>\r\n        <Button color=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n        <Button\r\n          color=\"secondary\"\r\n          onClick={() => {\r\n            setValue(10);\r\n          }}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst SelectingDealForm = reduxForm({\r\n  // a unique name for the form\r\n  form: \"dealForm\",\r\n})(DealForm);\r\n\r\nconst selector = formValueSelector(\"dealForm\"); // <-- same as form name\r\n\r\nexport default connect((state: ApplicationState) => {\r\n  const selectedSecurityId = selector(state, \"dealSecurity\");\r\n\r\n  const price = selector(state, \"dealPrice\");\r\n  const count = selector(state, \"dealCount\");\r\n\r\n  const getNominalPrice = (\r\n    securities: Security[] | undefined,\r\n    secId: number | undefined\r\n  ) => {\r\n    if (securities === undefined || secId === undefined) {\r\n      return 0;\r\n    }\r\n\r\n    const security = securities.find((s) => s.id === selectedSecurityId);\r\n\r\n    if (security?.type === \"bond\") {\r\n      return (security as Bond).nominalPrice;\r\n    }\r\n\r\n    return 0;\r\n  };\r\n\r\n  return {\r\n    securities: state.securities?.securities,\r\n    accounts: state.accounts?.accounts,\r\n    nominalPrice: getNominalPrice(\r\n      state.securities?.securities,\r\n      selectedSecurityId\r\n    ),\r\n    price: price,\r\n    count: count,\r\n    initialValues: {\r\n      dealOperation: \"1\",\r\n      dealDate: new Date().toISOString(),\r\n      deliveryDate: null,\r\n      //dealDate: \"lll\",\r\n      dealTime: null,\r\n      nominalPrice: null,\r\n      dealVolume: null,\r\n    },\r\n  };\r\n})(SelectingDealForm);\r\n","C:\\projects\\git\\xplatform\\client-app\\src\\components\\deals\\EditDealDialog.tsx",[],"C:\\projects\\git\\xplatform\\client-app\\src\\components\\import\\Financials.tsx",["201","202","203","204"],"import React from \"react\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\nimport {\r\n  Button,\r\n  createStyles,\r\n  Theme,\r\n  withStyles,\r\n  WithStyles,\r\n} from \"@material-ui/core\";\r\n\r\nimport {\r\n  CellClassParams,\r\n  ColDef,\r\n  DataGrid,\r\n  SelectionChangeParams,\r\n  ValueGetterParams,\r\n} from \"@material-ui/data-grid\";\r\n\r\nimport * as ImportStore from \"../../store/Import\";\r\nimport { format, parseISO } from \"date-fns\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"& .super-app.negative\": {\r\n        backgroundColor: \"#d47483\",\r\n        color: \"#1a3e72\",\r\n        fontWeight: \"600\",\r\n      },\r\n      \"& .super-app.positive\": {\r\n        backgroundColor: \"rgba(157, 255, 118, 0.49)\",\r\n        color: \"#1a3e72\",\r\n        fontWeight: \"600\",\r\n      },\r\n    },\r\n  });\r\n\r\nconst columns: ColDef[] = [\r\n  { field: \"code\", headerName: \"Ticker\", width: 80 },\r\n  { field: \"name\", headerName: \"Name\", width: 330 },\r\n  {\r\n    field: \"loadDate\",\r\n    headerName: \"Load Date\",\r\n    type: \"date\",\r\n    /*valueGetter: (params: ValueGetterParams) => {\r\n      return format(parseISO(params.value as string), \"dd/MM/yyyy\");\r\n    },*/\r\n    width: 200,\r\n  },\r\n  {\r\n    field: \"lastFinance\",\r\n    headerName: \"Last Finance\",\r\n    type: \"date\",\r\n    /*valueGetter: (params: ValueGetterParams) => {\r\n      return format(parseISO(params.value as string), \"dd/MM/yyyy\");\r\n    },*/\r\n    width: 200,\r\n  },\r\n  {\r\n    field: \"status\",\r\n    headerName: \"Status\",\r\n    width: 100,\r\n    cellClassName: (params: CellClassParams) =>\r\n      clsx(\"super-app\", {\r\n        negative: params.value && (params.value as string) !== \"Processed\",\r\n        positive: (params.value as string) === \"Processed\",\r\n      }),\r\n  },\r\n];\r\n\r\ninterface IProps {\r\n  financials: ImportStore.YahooFinancial[];\r\n  onSelectionChange: (keys: string[]) => void;\r\n}\r\n\r\ntype ImportProps = IProps & WithStyles<typeof styles>;\r\n\r\nconst Securities: React.FC<ImportProps> = (props) => {\r\n  const selectionChange = (prs: SelectionChangeParams) => {\r\n    props.onSelectionChange(prs.rowIds as string[]);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        style={{ height: 520, width: \"100%\", backgroundColor: \"white\" }}\r\n        className={props.classes.root}\r\n      >\r\n        <DataGrid\r\n          rows={props.financials}\r\n          columns={columns}\r\n          pageSize={15}\r\n          checkboxSelection\r\n          onSelectionChange={selectionChange}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport const styled = withStyles(styles)(Securities);\r\n","C:\\projects\\git\\xplatform\\client-app\\src\\components\\import\\Securities.tsx",["205"],"import React from \"react\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\nimport {\r\n  Button,\r\n  createStyles,\r\n  Theme,\r\n  withStyles,\r\n  WithStyles,\r\n} from \"@material-ui/core\";\r\n\r\nimport {\r\n  CellClassParams,\r\n  ColDef,\r\n  DataGrid,\r\n  SelectionChangeParams,\r\n} from \"@material-ui/data-grid\";\r\n\r\nimport * as ImportStore from \"../../store/Import\";\r\n\r\nconst styles = (theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      \"& .super-app.negative\": {\r\n        backgroundColor: \"#d47483\",\r\n        color: \"#1a3e72\",\r\n        fontWeight: \"600\",\r\n      },\r\n      \"& .super-app.positive\": {\r\n        backgroundColor: \"rgba(157, 255, 118, 0.49)\",\r\n        color: \"#1a3e72\",\r\n        fontWeight: \"600\",\r\n      },\r\n    },\r\n  });\r\n\r\nconst columns: ColDef[] = [\r\n  { field: \"ticker\", headerName: \"Ticker\", width: 80 },\r\n  { field: \"isin\", headerName: \"ISIN\", width: 140 },\r\n  { field: \"currency\", headerName: \"Currency\", width: 80 },\r\n  { field: \"name\", headerName: \"Name\", width: 330 },\r\n  { field: \"board\", headerName: \"Board\", width: 100 },\r\n  { field: \"emitent\", headerName: \"Emitent\", width: 100 },\r\n  {\r\n    field: \"processed\",\r\n    headerName: \"Processed\",\r\n    width: 100,\r\n    cellClassName: (params: CellClassParams) =>\r\n      clsx(\"super-app\", {\r\n        negative: (params.value as boolean) === false,\r\n        positive: (params.value as boolean) === true,\r\n      }),\r\n  },\r\n];\r\n\r\ninterface IProps {\r\n  securities: ImportStore.Security[];\r\n  onSelectionChange: (keys: string[]) => void;\r\n}\r\n\r\ntype ImportProps = IProps & WithStyles<typeof styles>;\r\n\r\nconst Securities: React.FC<ImportProps> = (props) => {\r\n  const selectionChange = (prs: SelectionChangeParams) => {\r\n    props.onSelectionChange(prs.rowIds as string[]);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        style={{ height: 520, width: \"100%\", backgroundColor: \"white\" }}\r\n        className={props.classes.root}\r\n      >\r\n        <DataGrid\r\n          rows={props.securities}\r\n          columns={columns}\r\n          pageSize={15}\r\n          checkboxSelection\r\n          onSelectionChange={selectionChange}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport const styled = withStyles(styles)(Securities);\r\n","C:\\projects\\git\\xplatform\\client-app\\src\\components\\dropdown\\index.tsx",["206"],"import { ArrowDropDown } from \"@material-ui/icons\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./dropdown.css\";\r\n\r\ninterface IDropdownProps {\r\n  options: any;\r\n  id: any;\r\n  label: any;\r\n  prompt: string;\r\n  value: any;\r\n  onChange: (option: any) => void;\r\n}\r\n\r\nconst Dropdown: React.FC<IDropdownProps> = ({\r\n  options,\r\n  id,\r\n  label,\r\n  prompt,\r\n  value,\r\n  onChange,\r\n}) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const ref = useRef(null);\r\n\r\n  useEffect(() => {\r\n    [\"click\", \"touched\"].forEach((e) => {\r\n      document.addEventListener(e, toggle);\r\n    });\r\n\r\n    return () =>\r\n      [\"click\", \"touched\"].forEach((e) => {\r\n        document.removeEventListener(e, toggle);\r\n      });\r\n  }, []);\r\n\r\n  function toggle(e: any) {\r\n    setOpen(e && e.target === ref.current);\r\n  }\r\n\r\n  function filter(options: any) {\r\n    return options.filter(\r\n      (option: any) =>\r\n        option[label].toLowerCase().indexOf(query.toLocaleLowerCase()) > -1\r\n    );\r\n  }\r\n\r\n  function displayValue() {\r\n    if (query.length > 0) return query;\r\n    if (value) return value[label];\r\n    return \"\";\r\n  }\r\n\r\n  function selectOption(option: any) {\r\n    setQuery(\"\");\r\n    onChange(option);\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <div className=\"control\">\r\n        <div className=\"selected-value\">\r\n          <input\r\n            type=\"text\"\r\n            ref={ref}\r\n            placeholder={value ? value[label] : prompt}\r\n            value={displayValue()}\r\n            onChange={(e) => {\r\n              setQuery(e.target.value);\r\n              onChange(null);\r\n            }}\r\n            onClick={toggle}\r\n            onTouchEnd={toggle}\r\n          />\r\n        </div>\r\n        <div className={`arrow ${open ? \"open\" : null}`}></div>\r\n      </div>\r\n      <div className={`options ${open ? \"open\" : null}`}>\r\n        {filter(options).map((option: any) => (\r\n          <div\r\n            key={option[id]}\r\n            className={`option ${value === option ? \"selected\" : null}`}\r\n            onClick={() => selectOption(option)}\r\n            onTouchEnd={() => selectOption(option)}\r\n          >\r\n            {option[label]}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n",["207","208"],"C:\\projects\\git\\xplatform\\client-app\\src\\store\\Positions.ts",["209"],"import { Action, Reducer } from \"redux\";\r\nimport { AppThunkAction } from \"./\";\r\nimport { v4 } from \"uuid\";\r\n\r\nexport interface PositionsState {\r\n  isLoading: boolean;\r\n  accountId?: number;\r\n  positions: Position[];\r\n  positionDetails: PositionDetails[];\r\n\r\n  requestId?: string;\r\n  filterId?: string;\r\n}\r\n\r\nexport interface Position {\r\n  code: string;\r\n  limit: number;\r\n}\r\n\r\nexport interface PositionDetails {\r\n  account: number;\r\n  code: string;\r\n  date: Date;\r\n  limit: number;\r\n  price: number;\r\n}\r\n\r\ninterface RequestPositionsAction {\r\n  type: \"POSITIONS_REQUEST\";\r\n  filterId: string;\r\n}\r\n\r\ninterface ReceivePositionsAction {\r\n  type: \"POSITIONS_RECEIVE\";\r\n  positions: Position[];\r\n}\r\n\r\ninterface RequestDetailsAction {\r\n  type: \"DETAILS_REQUEST\";\r\n}\r\n\r\ninterface ReceiveDetailsAction {\r\n  type: \"DETAILS_RECEIVE\";\r\n  details: PositionDetails[];\r\n}\r\n\r\ninterface ChangeFilterPositionsAction {\r\n  type: \"POSITIONS_CHANGE_FILTER\";\r\n  payload: any;\r\n}\r\n\r\ntype KnownAction =\r\n  | RequestPositionsAction\r\n  | ReceivePositionsAction\r\n  | RequestDetailsAction\r\n  | ReceiveDetailsAction\r\n  | ChangeFilterPositionsAction;\r\n\r\nexport const actionCreators = {\r\n  changeFilter: (payload: any): KnownAction => ({\r\n    type: \"POSITIONS_CHANGE_FILTER\",\r\n    payload,\r\n  }),\r\n  requestPositions:\r\n    (accountId?: number): AppThunkAction<KnownAction> =>\r\n    (dispatch, getState) => {\r\n      const appState = getState();\r\n\r\n      if (\r\n        appState.positions?.filterId &&\r\n        appState.positions?.filterId !== appState.positions?.requestId\r\n      ) {\r\n        fetch(`/api/position/get?${accountId ? `accountId=${accountId}` : \"\"}`)\r\n          .then((response) => response.json() as Promise<Position[]>)\r\n          .then((data) => {\r\n            dispatch({ type: \"POSITIONS_RECEIVE\", positions: data });\r\n          });\r\n\r\n        dispatch({\r\n          type: \"POSITIONS_REQUEST\",\r\n          filterId: appState.positions?.filterId,\r\n        });\r\n      }\r\n    },\r\n\r\n  requestPositionDetails:\r\n    (code: string, accountId?: number): AppThunkAction<KnownAction> =>\r\n    (dispatch, getState) => {\r\n      const appState = getState();\r\n\r\n      fetch(\r\n        `/api/position/getDetails?security=${code}${\r\n          accountId ? `&accountId=${accountId}` : \"\"\r\n        }`\r\n      )\r\n        .then((response) => response.json() as Promise<PositionDetails[]>)\r\n        .then((data) => {\r\n          dispatch({ type: \"DETAILS_RECEIVE\", details: data });\r\n        });\r\n\r\n      dispatch({ type: \"DETAILS_REQUEST\" });\r\n    },\r\n};\r\n\r\nconst unloadedState: PositionsState = {\r\n  positions: [],\r\n  positionDetails: [],\r\n  isLoading: false,\r\n  filterId: v4(),\r\n};\r\n\r\nexport const reducer: Reducer<PositionsState> = (\r\n  state: PositionsState | undefined,\r\n  incomingAction: Action\r\n): PositionsState => {\r\n  if (state === undefined) {\r\n    return unloadedState;\r\n  }\r\n\r\n  const action = incomingAction as KnownAction;\r\n\r\n  switch (action.type) {\r\n    case \"POSITIONS_REQUEST\":\r\n      return { ...state, isLoading: true, requestId: action.filterId };\r\n    case \"DETAILS_REQUEST\":\r\n      return { ...state, positionDetails: [], isLoading: true };\r\n    case \"POSITIONS_RECEIVE\":\r\n      return { ...state, positions: action.positions, isLoading: false };\r\n    case \"DETAILS_RECEIVE\":\r\n      return { ...state, positionDetails: action.details, isLoading: false };\r\n    case \"POSITIONS_CHANGE_FILTER\":\r\n      return { ...state, ...action.payload, filterId: v4() };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\projects\\git\\xplatform\\client-app\\src\\components\\positions\\Positions.tsx",[],{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":6,"column":10,"nodeType":"216","messageId":"217","endLine":6,"endColumn":26},{"ruleId":"214","severity":1,"message":"218","line":2,"column":10,"nodeType":"216","messageId":"217","endLine":2,"endColumn":16},{"ruleId":"214","severity":1,"message":"219","line":3,"column":8,"nodeType":"216","messageId":"217","endLine":3,"endColumn":12},{"ruleId":"214","severity":1,"message":"220","line":6,"column":8,"nodeType":"216","messageId":"217","endLine":6,"endColumn":16},{"ruleId":"214","severity":1,"message":"221","line":5,"column":7,"nodeType":"216","messageId":"217","endLine":5,"endColumn":18},{"ruleId":"222","severity":1,"message":"223","line":7,"column":1,"nodeType":"224","endLine":14,"endColumn":3},{"ruleId":"214","severity":1,"message":"225","line":8,"column":10,"nodeType":"216","messageId":"217","endLine":8,"endColumn":15},{"ruleId":"214","severity":1,"message":"226","line":8,"column":17,"nodeType":"216","messageId":"217","endLine":8,"endColumn":25},{"ruleId":"214","severity":1,"message":"227","line":4,"column":10,"nodeType":"216","messageId":"217","endLine":4,"endColumn":15},{"ruleId":"214","severity":1,"message":"228","line":10,"column":10,"nodeType":"216","messageId":"217","endLine":10,"endColumn":14},{"ruleId":"214","severity":1,"message":"229","line":12,"column":10,"nodeType":"216","messageId":"217","endLine":12,"endColumn":22},{"ruleId":"214","severity":1,"message":"230","line":12,"column":24,"nodeType":"216","messageId":"217","endLine":12,"endColumn":34},{"ruleId":"214","severity":1,"message":"231","line":5,"column":17,"nodeType":"216","messageId":"217","endLine":5,"endColumn":23},{"ruleId":"214","severity":1,"message":"232","line":5,"column":36,"nodeType":"216","messageId":"217","endLine":5,"endColumn":53},{"ruleId":"214","severity":1,"message":"233","line":20,"column":13,"nodeType":"216","messageId":"217","endLine":20,"endColumn":20},{"ruleId":"214","severity":1,"message":"234","line":20,"column":22,"nodeType":"216","messageId":"217","endLine":20,"endColumn":29},{"ruleId":"214","severity":1,"message":"235","line":20,"column":31,"nodeType":"216","messageId":"217","endLine":20,"endColumn":36},{"ruleId":"214","severity":1,"message":"236","line":37,"column":15,"nodeType":"216","messageId":"217","endLine":37,"endColumn":23},{"ruleId":"237","severity":1,"message":"238","line":60,"column":37,"nodeType":"239","messageId":"240","endLine":60,"endColumn":39},{"ruleId":"214","severity":1,"message":"236","line":36,"column":15,"nodeType":"216","messageId":"217","endLine":36,"endColumn":23},{"ruleId":"214","severity":1,"message":"236","line":41,"column":15,"nodeType":"216","messageId":"217","endLine":41,"endColumn":23},{"ruleId":"214","severity":1,"message":"236","line":53,"column":11,"nodeType":"216","messageId":"217","endLine":53,"endColumn":19},{"ruleId":"237","severity":1,"message":"238","line":55,"column":20,"nodeType":"239","messageId":"240","endLine":55,"endColumn":22},{"ruleId":"237","severity":1,"message":"238","line":63,"column":20,"nodeType":"239","messageId":"240","endLine":63,"endColumn":22},{"ruleId":"237","severity":1,"message":"238","line":78,"column":20,"nodeType":"239","messageId":"240","endLine":78,"endColumn":22},{"ruleId":"237","severity":1,"message":"238","line":93,"column":20,"nodeType":"239","messageId":"240","endLine":93,"endColumn":22},{"ruleId":"237","severity":1,"message":"238","line":165,"column":29,"nodeType":"239","messageId":"240","endLine":165,"endColumn":31},{"ruleId":"237","severity":1,"message":"238","line":169,"column":29,"nodeType":"239","messageId":"240","endLine":169,"endColumn":31},{"ruleId":"214","severity":1,"message":"241","line":1,"column":17,"nodeType":"216","messageId":"217","endLine":1,"endColumn":25},{"ruleId":"214","severity":1,"message":"242","line":1,"column":27,"nodeType":"216","messageId":"217","endLine":1,"endColumn":33},{"ruleId":"214","severity":1,"message":"243","line":1,"column":35,"nodeType":"216","messageId":"217","endLine":1,"endColumn":44},{"ruleId":"244","severity":1,"message":"245","line":5,"column":46,"nodeType":"246","messageId":"240","endLine":5,"endColumn":48},{"ruleId":"247","severity":1,"message":"248","line":16,"column":7,"nodeType":"249","endLine":21,"endColumn":9},{"ruleId":"214","severity":1,"message":"250","line":3,"column":8,"nodeType":"216","messageId":"217","endLine":3,"endColumn":12},{"ruleId":"214","severity":1,"message":"229","line":7,"column":3,"nodeType":"216","messageId":"217","endLine":7,"endColumn":15},{"ruleId":"214","severity":1,"message":"251","line":11,"column":3,"nodeType":"216","messageId":"217","endLine":11,"endColumn":8},{"ruleId":"214","severity":1,"message":"252","line":12,"column":3,"nodeType":"216","messageId":"217","endLine":12,"endColumn":13},{"ruleId":"214","severity":1,"message":"253","line":13,"column":3,"nodeType":"216","messageId":"217","endLine":13,"endColumn":13},{"ruleId":"214","severity":1,"message":"254","line":16,"column":10,"nodeType":"216","messageId":"217","endLine":16,"endColumn":25},{"ruleId":"214","severity":1,"message":"255","line":16,"column":27,"nodeType":"216","messageId":"217","endLine":16,"endColumn":33},{"ruleId":"214","severity":1,"message":"256","line":16,"column":35,"nodeType":"216","messageId":"217","endLine":16,"endColumn":43},{"ruleId":"214","severity":1,"message":"257","line":22,"column":30,"nodeType":"216","messageId":"217","endLine":22,"endColumn":37},{"ruleId":"237","severity":1,"message":"238","line":85,"column":66,"nodeType":"239","messageId":"240","endLine":85,"endColumn":68},{"ruleId":"237","severity":1,"message":"238","line":97,"column":33,"nodeType":"239","messageId":"240","endLine":97,"endColumn":35},{"ruleId":"214","severity":1,"message":"241","line":1,"column":17,"nodeType":"216","messageId":"217","endLine":1,"endColumn":25},{"ruleId":"214","severity":1,"message":"258","line":7,"column":3,"nodeType":"216","messageId":"217","endLine":7,"endColumn":12},{"ruleId":"214","severity":1,"message":"229","line":19,"column":3,"nodeType":"216","messageId":"217","endLine":19,"endColumn":15},{"ruleId":"214","severity":1,"message":"230","line":20,"column":3,"nodeType":"216","messageId":"217","endLine":20,"endColumn":13},{"ruleId":"214","severity":1,"message":"251","line":21,"column":3,"nodeType":"216","messageId":"217","endLine":21,"endColumn":8},{"ruleId":"214","severity":1,"message":"259","line":26,"column":10,"nodeType":"216","messageId":"217","endLine":26,"endColumn":25},{"ruleId":"214","severity":1,"message":"260","line":26,"column":37,"nodeType":"216","messageId":"217","endLine":26,"endColumn":42},{"ruleId":"214","severity":1,"message":"261","line":82,"column":7,"nodeType":"216","messageId":"217","endLine":82,"endColumn":15},{"ruleId":"214","severity":1,"message":"262","line":216,"column":18,"nodeType":"216","messageId":"217","endLine":216,"endColumn":27},{"ruleId":"263","severity":1,"message":"264","line":222,"column":6,"nodeType":"265","endLine":222,"endColumn":13,"suggestions":"266"},{"ruleId":"263","severity":1,"message":"264","line":228,"column":6,"nodeType":"265","endLine":228,"endColumn":14,"suggestions":"267"},{"ruleId":"214","severity":1,"message":"268","line":6,"column":3,"nodeType":"216","messageId":"217","endLine":6,"endColumn":9},{"ruleId":"214","severity":1,"message":"269","line":18,"column":3,"nodeType":"216","messageId":"217","endLine":18,"endColumn":20},{"ruleId":"214","severity":1,"message":"270","line":22,"column":10,"nodeType":"216","messageId":"217","endLine":22,"endColumn":16},{"ruleId":"214","severity":1,"message":"271","line":22,"column":18,"nodeType":"216","messageId":"217","endLine":22,"endColumn":26},{"ruleId":"214","severity":1,"message":"268","line":6,"column":3,"nodeType":"216","messageId":"217","endLine":6,"endColumn":9},{"ruleId":"214","severity":1,"message":"272","line":1,"column":10,"nodeType":"216","messageId":"217","endLine":1,"endColumn":23},{"ruleId":"210","replacedBy":"273"},{"ruleId":"212","replacedBy":"274"},{"ruleId":"214","severity":1,"message":"236","line":89,"column":13,"nodeType":"216","messageId":"217","endLine":89,"endColumn":21},"no-native-reassign",["275"],"no-negated-in-lhs",["276"],"@typescript-eslint/no-unused-vars","'ApplicationState' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'logo' is defined but never used.","'Emitents' is defined but never used.","'drawerWidth' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'Field' is defined but never used.","'Deal' is defined but never used.","'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'change' is defined but never used.","'formValueSelector' is defined but never used.","'touched' is assigned a value but never used.","'invalid' is assigned a value but never used.","'error' is assigned a value but never used.","'appState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'clsx' is defined but never used.","'Theme' is defined but never used.","'withStyles' is defined but never used.","'WithStyles' is defined but never used.","'CellClassParams' is defined but never used.","'ColDef' is defined but never used.","'DataGrid' is defined but never used.","'compose' is defined but never used.","'TextField' is defined but never used.","'SecuritiesState' is defined but never used.","'Share' is defined but never used.","'RedRadio' is assigned a value but never used.","'setValue2' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["277"],["278"],"'Button' is defined but never used.","'ValueGetterParams' is defined but never used.","'format' is defined but never used.","'parseISO' is defined but never used.","'ArrowDropDown' is defined but never used.",["275"],["276"],"no-global-assign","no-unsafe-negation",{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},"Update the dependencies array to be: [props, value]",{"range":"283","text":"284"},"Update the dependencies array to be: [props, value2]",{"range":"285","text":"286"},[5252,5259],"[props, value]",[5384,5392],"[props, value2]"]