[{"E:\\git\\xplatform\\client-app\\src\\index.tsx":"1","E:\\git\\xplatform\\client-app\\src\\Theme.ts":"2","E:\\git\\xplatform\\client-app\\src\\serviceWorker.ts":"3","E:\\git\\xplatform\\client-app\\src\\store\\configureStore.ts":"4","E:\\git\\xplatform\\client-app\\src\\App.tsx":"5","E:\\git\\xplatform\\client-app\\src\\store\\index.ts":"6","E:\\git\\xplatform\\client-app\\src\\components\\blocks\\2Layout.tsx":"7","E:\\git\\xplatform\\client-app\\src\\components\\deals\\Deals.tsx":"8","E:\\git\\xplatform\\client-app\\src\\components\\financials\\2Financials.tsx":"9","E:\\git\\xplatform\\client-app\\src\\components\\deals\\DealCreate.tsx":"10","E:\\git\\xplatform\\client-app\\src\\components\\shares\\2Shares.tsx":"11","E:\\git\\xplatform\\client-app\\src\\components\\portfolio\\Portfolio.tsx":"12","E:\\git\\xplatform\\client-app\\src\\components\\import\\ImportSecurities.tsx":"13","E:\\git\\xplatform\\client-app\\src\\store\\Accounts.ts":"14","E:\\git\\xplatform\\client-app\\src\\store\\Deals.ts":"15","E:\\git\\xplatform\\client-app\\src\\store\\Securities.ts":"16","E:\\git\\xplatform\\client-app\\src\\store\\Portfolio.ts":"17","E:\\git\\xplatform\\client-app\\src\\store\\Form.ts":"18","E:\\git\\xplatform\\client-app\\src\\store\\Financials.ts":"19","E:\\git\\xplatform\\client-app\\src\\store\\Import.ts":"20","E:\\git\\xplatform\\client-app\\src\\store\\Shares.ts":"21","E:\\git\\xplatform\\client-app\\src\\components\\imageViewer\\index.tsx":"22","E:\\git\\xplatform\\client-app\\src\\components\\deals\\EditDealDialog.tsx":"23","E:\\git\\xplatform\\client-app\\src\\components\\deals\\DealForm.tsx":"24","E:\\git\\xplatform\\client-app\\src\\components\\tabs\\index.tsx":"25","E:\\git\\xplatform\\client-app\\src\\components\\dropdown\\index.tsx":"26","E:\\git\\xplatform\\client-app\\src\\components\\financials\\Financials.tsx":"27"},{"size":1212,"mtime":1607325544023,"results":"28","hashOfConfig":"29"},{"size":244,"mtime":1594060974065,"results":"30","hashOfConfig":"29"},{"size":5295,"mtime":499162500000,"results":"31","hashOfConfig":"29"},{"size":992,"mtime":1597334252045,"results":"32","hashOfConfig":"29"},{"size":1343,"mtime":1610117575489,"results":"33","hashOfConfig":"29"},{"size":1095,"mtime":1610012250348,"results":"34","hashOfConfig":"29"},{"size":324,"mtime":1607403909910,"results":"35","hashOfConfig":"29"},{"size":5315,"mtime":1585845997431,"results":"36","hashOfConfig":"29"},{"size":588,"mtime":1608732209097,"results":"37","hashOfConfig":"29"},{"size":3055,"mtime":1585764210639,"results":"38","hashOfConfig":"29"},{"size":4473,"mtime":1607608551438,"results":"39","hashOfConfig":"29"},{"size":2460,"mtime":1590646153334,"results":"40","hashOfConfig":"29"},{"size":3672,"mtime":1610116727748,"results":"41","hashOfConfig":"29"},{"size":699,"mtime":1587744109630,"results":"42","hashOfConfig":"29"},{"size":2374,"mtime":1603082864111,"results":"43","hashOfConfig":"29"},{"size":2027,"mtime":1603082864086,"results":"44","hashOfConfig":"29"},{"size":2210,"mtime":1603082864086,"results":"45","hashOfConfig":"29"},{"size":216,"mtime":1597334057460,"results":"46","hashOfConfig":"29"},{"size":1857,"mtime":1603082864086,"results":"47","hashOfConfig":"29"},{"size":2841,"mtime":1610116692778,"results":"48","hashOfConfig":"29"},{"size":2085,"mtime":1603082864086,"results":"49","hashOfConfig":"29"},{"size":666,"mtime":1607424264442,"results":"50","hashOfConfig":"29"},{"size":2686,"mtime":1584299854238,"results":"51","hashOfConfig":"29"},{"size":10694,"mtime":1602587088301,"results":"52","hashOfConfig":"29"},{"size":1449,"mtime":1608732209097,"results":"53","hashOfConfig":"29"},{"size":2321,"mtime":1608700056884,"results":"54","hashOfConfig":"29"},{"size":10444,"mtime":1594883115656,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"1lpnt8p",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"58"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\git\\xplatform\\client-app\\src\\index.tsx",[],["123","124"],"E:\\git\\xplatform\\client-app\\src\\Theme.ts",[],"E:\\git\\xplatform\\client-app\\src\\serviceWorker.ts",[],"E:\\git\\xplatform\\client-app\\src\\store\\configureStore.ts",["125"],"import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { connectRouter, routerMiddleware } from \"connected-react-router\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport { History } from \"history\";\r\nimport { ApplicationState, reducers } from \"./\";\r\n\r\nexport default function configureStore(history: History, initialState?: any) {\r\n  const middleware = [thunk, routerMiddleware(history)];\r\n\r\n  const enhancers = [];\r\n  const windowIfDefined =\r\n    typeof window === \"undefined\" ? null : (window as any);\r\n  if (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__) {\r\n    enhancers.push(windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__());\r\n  }\r\n\r\n  const rootReducer = combineReducers({\r\n    ...reducers,\r\n    router: connectRouter(history),\r\n    form: formReducer,\r\n  });\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(applyMiddleware(...middleware), ...enhancers)\r\n  );\r\n}\r\n","E:\\git\\xplatform\\client-app\\src\\App.tsx",["126","127","128","129"],"E:\\git\\xplatform\\client-app\\src\\store\\index.ts",[],"E:\\git\\xplatform\\client-app\\src\\components\\blocks\\2Layout.tsx",["130","131","132","133"],"import * as React from \"react\";\r\n\r\nimport \"../../index.scss\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nexport default (props: { children?: React.ReactNode }) => {\r\n  const [value, setValue] = React.useState(null);\r\n  return (\r\n    <div className=\"root\">\r\n      <div className=\"container\">{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n","E:\\git\\xplatform\\client-app\\src\\components\\deals\\Deals.tsx",[],"E:\\git\\xplatform\\client-app\\src\\components\\financials\\2Financials.tsx",["134"],"import React from \"react\";\r\nimport Tabs, { Tab } from \"../tabs\";\r\n\r\nclass Financials extends React.PureComponent<{}> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Financials</h1>\r\n\r\n        <Tabs value=\"incomes\">\r\n          <Tab label=\"Incomes\" icon=\"fa-code\" value=\"incomes\" />\r\n          <Tab label=\"Cash Flow\" icon=\"fa-code\" value=\"flows\" />\r\n          <Tab label=\"Balance Sheet\" icon=\"fa-code\" value=\"balance\" />\r\n        </Tabs>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Financials;\r\n","E:\\git\\xplatform\\client-app\\src\\components\\deals\\DealCreate.tsx",["135","136","137","138"],"import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport * as SecuritiesStore from '../../store/Securities'\r\nimport * as DealStore from '../../store/Deals'\r\nimport { Paper } from '@material-ui/core'\r\nimport { Security } from '../../store/Securities'\r\nimport { Account } from '../../store/Accounts'\r\nimport { Deal } from '../../store/Deals'\r\nimport { ApplicationState } from '../../store'\r\nimport { createStyles, makeStyles, Theme, withStyles } from '@material-ui/core/styles';\r\nimport DealForm from './DealForm'\r\n\r\nimport { format, parseISO, addHours } from 'date-fns'\r\n\r\ninterface EditDealDialogProps {\r\n    securities: Security[],\r\n    accounts: Account[],\r\n    classes: {\r\n        root: string\r\n    }\r\n}\r\n\r\nconst styles = (theme: Theme) =>({\r\n    root: {\r\n            /*'& .MuiGrid-item': {\r\n                width: 200,\r\n            },*/\r\n        },\r\n})\r\n\r\nclass DealCreate extends React.PureComponent<EditDealDialogProps\r\n        & typeof SecuritiesStore.actionCreators\r\n        & typeof DealStore.actionCreators> {\r\n\r\n    public componentDidMount() {\r\n        this.props.requestSecurities();\r\n    }\r\n\r\n    submit = (values:any) => {\r\n        // print the form values to the console\r\n        console.log(values)\r\n\r\n        const toMSK = (iso_dt: string): string => {\r\n\r\n            const zoned = parseISO(iso_dt)\r\n            const offset = zoned.getTimezoneOffset() / 60\r\n\r\n            return addHours(zoned, -(offset + 3)).toISOString()\r\n        }\r\n\r\n        const date = parseISO(values['dealDate'])\r\n        const time = parseISO(values['dealTime'])\r\n\r\n        const dateTime = new Date(`${format(date, 'yyyy-MM-dd')}T${format(time, 'HH:mm')}`).toISOString()\r\n\r\n        const deal = ({\r\n            accountId: values['dealAccount'],\r\n            number: parseInt(values['dealNumber']),\r\n            operation: parseInt(values['dealOperation']),\r\n            securityId: values['dealSecurity'],\r\n            date: toMSK(dateTime),\r\n            deliveryDate: toMSK(values['deliveryDate']),\r\n            price: parseFloat(values['dealPrice']),\r\n            count: parseInt(values['dealCount']),\r\n            volume: parseFloat(values['dealVolume']),\r\n            nkd: parseFloat(values['dealNkd'])\r\n        })\r\n\r\n        this.props.postDeal(deal)\r\n    }\r\n\r\n    public render() {\r\n\r\n        return (\r\n            <Paper>\r\n                <DealForm\r\n\r\n                    onSubmit={this.submit} />\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n\r\nlet dealForm = reduxForm({\r\n    // a unique name for the form\r\n    form: 'deal'\r\n})(DealCreate as any)\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => ({\r\n        securities: state.securities?.securities,\r\n        accounts: state.accounts?.accounts\r\n    }),\r\n    (dispatch) => bindActionCreators({\r\n        requestSecurities: SecuritiesStore.actionCreators.requestSecurities,\r\n        postDeal: DealStore.actionCreators.postDeal\r\n    }, dispatch)\r\n)(withStyles(styles)(dealForm as any));","E:\\git\\xplatform\\client-app\\src\\components\\shares\\2Shares.tsx",[],"E:\\git\\xplatform\\client-app\\src\\components\\portfolio\\Portfolio.tsx",["139"],"import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { ApplicationState } from '../../store';\r\nimport * as PortfolioStore from '../../store/Portfolio';\r\nimport { spawn } from 'child_process';\r\n\r\ntype PortfolioProps =\r\n    PortfolioStore.PortfolioState\r\n    & typeof PortfolioStore.actionCreators\r\n\r\nclass Portfolio extends React.PureComponent<PortfolioProps> {\r\n\r\n    public componentDidMount() {\r\n        this.props.requestPortfolio(\"common\");\r\n    }\r\n\r\n\r\n    public componentDidUpdate() {\r\n        this.props.requestPortfolio(\"common\");\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Portfolio</h1>\r\n                {this.props.isLoading && <span>Loading...</span>}\r\n                {this.renderPortfolioTable()}\r\n                {!this.props.isLoading && this.renderSummary()}\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private renderSummary() {\r\n        return (\r\n            <React.Fragment>\r\n                <div>{`Shares total: ${this.props.portfolio?.sharesPerc}%`}</div>\r\n                <div>{`Bonds total: ${this.props.portfolio?.bondsPerc}%`}</div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    private renderPortfolioTable() {\r\n        return (\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Code</th>\r\n                        <th>Name</th>\r\n                        <th>Limit</th>\r\n                        <th>Cost</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.props.portfolio?.items.map((item: PortfolioStore.PortfolioItem) =>\r\n                        <tr key={item.code}>\r\n                            <td>{item.code}</td>\r\n                            <td>{item.name}</td>\r\n                            <td>{item.limit}</td>\r\n                            <td>{item.cost}</td>\r\n                        </tr>\r\n                    )}\r\n                    <tr>\r\n                        <td>Total</td>\r\n                        <td></td>\r\n                        <td></td>\r\n                        <td>{this.props.portfolio && this.props.portfolio?.sharesTotal + this.props.portfolio?.bondsTotal}</td>\r\n                    </tr>\r\n\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state: ApplicationState) => state.portfolio,\r\n    PortfolioStore.actionCreators\r\n)(Portfolio as any);","E:\\git\\xplatform\\client-app\\src\\components\\import\\ImportSecurities.tsx",["140","141"],"E:\\git\\xplatform\\client-app\\src\\store\\Accounts.ts",[],"E:\\git\\xplatform\\client-app\\src\\store\\Deals.ts",["142","143"],"import { Action, Reducer } from 'redux';\r\nimport { reset } from 'redux-form';\r\nimport { AppThunkAction } from './';\r\n\r\nexport interface DealsState {\r\n    isLoading: boolean\r\n    deals: Deal[]\r\n}\r\n\r\nexport interface Deal {\r\n    id: number\r\n    accountId: number\r\n    number: number\r\n    operation: number\r\n    date: string\r\n    deliveryDate: string\r\n    price: number\r\n    count: number\r\n    volume: number\r\n    securityId: number\r\n    nkd: number\r\n}\r\n\r\ninterface RequestDealsAction {\r\n    type: 'DEALS_REQUEST'\r\n}\r\n\r\ninterface ReceiveDealsAction {\r\n    type: 'DEALS_RECEIVE',\r\n    deals: Deal[]\r\n}\r\n\r\ntype KnownAction = ReceiveDealsAction | RequestDealsAction;\r\n\r\nexport const actionCreators = {\r\n    requestDeals: (): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n\r\n        fetch(`/api/deal`)\r\n            .then(response => response.json() as Promise<Deal[]>)\r\n            .then(data => {\r\n                dispatch({ type: 'DEALS_RECEIVE', deals: data });\r\n            });\r\n\r\n        dispatch({ type: 'DEALS_REQUEST' });\r\n    },\r\n\r\n    postDeal: (deal: any): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n\r\n        fetch(`/api/deal`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(deal),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(response => {\r\n                console.log(response.status)\r\n\r\n                if (response.status == 200) {\r\n                    dispatch(reset('dealForm'))\r\n                }\r\n            })\r\n        /*.then(response => response.json() as Promise<any>)\r\n        .then(data => {\r\n            console.log(data)\r\n        });*/\r\n        \r\n        console.log(deal)\r\n    }\r\n};\r\n\r\nconst unloadedState: DealsState = {\r\n    deals: [], isLoading: false\r\n};\r\n\r\nexport const reducer: Reducer<DealsState> = (state: DealsState | undefined, incomingAction: Action): DealsState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction\r\n\r\n    switch (action.type) {\r\n        case 'DEALS_REQUEST':\r\n            return { ...state, isLoading: true }\r\n        case 'DEALS_RECEIVE':\r\n            return {\r\n                deals: action.deals,\r\n                isLoading: false\r\n            }\r\n        default: return state\r\n    }\r\n}","E:\\git\\xplatform\\client-app\\src\\store\\Securities.ts",["144"],"import { Action, Reducer } from 'redux'\r\nimport { AppThunkAction } from './';\r\n\r\nexport interface SecuritiesState {\r\n    isLoading: boolean\r\n    securities: Security[]\r\n}\r\n\r\nexport interface Security {\r\n    id: number,\r\n    name: string,\r\n    type: string\r\n}\r\n\r\nexport interface Share extends Security {\r\n\r\n}\r\n\r\nexport interface Bond extends Security {\r\n    nominalPrice: number\r\n}\r\n\r\ninterface RequestSecurityAction {\r\n    type: 'SECURITY_REQUEST'\r\n}\r\n\r\ninterface ReceiveSecurityAction {\r\n    type: 'SECURITY_RECEIVE',\r\n    securities: Security[]\r\n}\r\n\r\ntype KnownAction = RequestSecurityAction | ReceiveSecurityAction;\r\n\r\nexport const actionCreators = {\r\n    requestSecurities: (): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n\r\n        const shares = fetch(`/api/share`)\r\n            .then(response => response.json() as Promise<Security[]>);\r\n\r\n        const bonds = fetch(`/api/bond`)\r\n            .then(response => response.json() as Promise<Security[]>);\r\n\r\n        const etf = fetch(`/api/etf`)\r\n            .then(response => response.json() as Promise<Security[]>);\r\n\r\n        Promise.all([shares, bonds, etf]).then(([shares, bonds, etf]) => {\r\n            dispatch({ type: 'SECURITY_RECEIVE', securities: [...shares, ...bonds, ...etf] });\r\n        })\r\n\r\n\r\n        dispatch({ type: 'SECURITY_REQUEST' });\r\n    }\r\n};\r\n\r\nconst unloadedState: SecuritiesState = {\r\n    securities: [], isLoading: false\r\n};\r\n\r\nexport const reducer: Reducer<SecuritiesState> = (state: SecuritiesState | undefined, incomingAction: Action): SecuritiesState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction\r\n\r\n    switch (action.type) {\r\n        case 'SECURITY_REQUEST':\r\n            return { ...state, isLoading: true }\r\n        case 'SECURITY_RECEIVE':\r\n            return {\r\n                securities: action.securities,\r\n                isLoading: false\r\n            }\r\n        default: return state\r\n    }\r\n\r\n}","E:\\git\\xplatform\\client-app\\src\\store\\Portfolio.ts",[],"E:\\git\\xplatform\\client-app\\src\\store\\Form.ts",[],"E:\\git\\xplatform\\client-app\\src\\store\\Financials.ts",[],"E:\\git\\xplatform\\client-app\\src\\store\\Import.ts",["145","146","147"],"E:\\git\\xplatform\\client-app\\src\\store\\Shares.ts",["148"],"import { Action, Reducer } from 'redux'\r\nimport { AppThunkAction } from './';\r\n\r\nexport interface SharesState {\r\n    isLoading: boolean,\r\n    region?: string,\r\n    shares: ShareInfo[]\r\n}\r\n\r\nexport interface ShareInfo {\r\n    code: string,\r\n    emitent: string,\r\n    currency: string,\r\n    price?: number,\r\n    priceChange?: number,\r\n    financialPage?: string\r\n}\r\n\r\nexport interface PriceValues {\r\n    code: string;\r\n    lastPrice: number;\r\n    change: number\r\n}\r\n\r\ninterface RequestShareInfoAction {\r\n    type: 'SHARESINFO_REQUEST',\r\n    region: string\r\n}\r\n\r\ninterface ReceiveShareInfoAction {\r\n    type: 'SHARESINFO_RECEIVE',\r\n    region: string,\r\n    shares: ShareInfo[]\r\n}\r\n\r\n\r\ntype KnownAction = RequestShareInfoAction | ReceiveShareInfoAction;\r\n\r\nexport const actionCreators = {\r\n    requestShareInfo: (region: string): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n\r\n        //const region = 'United States'\r\n\r\n        fetch(`/api/sharesInfo?region=${region}`)\r\n            .then(response => response.json() as Promise<ShareInfo[]>)\r\n            .then(data => {\r\n                dispatch({ type: 'SHARESINFO_RECEIVE', region: region, shares: data });\r\n            });\r\n\r\n        dispatch({ type: 'SHARESINFO_REQUEST', region: region });\r\n    }\r\n};\r\n\r\nconst unloadedState: SharesState = {\r\n    region: 'Moscow',\r\n    shares: [],\r\n    isLoading: false\r\n};\r\n\r\nexport const reducer: Reducer<SharesState> = (state: SharesState | undefined, incomingAction: Action): SharesState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction\r\n\r\n    switch (action.type) {\r\n        case 'SHARESINFO_REQUEST':\r\n            return {\r\n                ...state,\r\n                region: action.region,\r\n                isLoading: true\r\n            }\r\n        case 'SHARESINFO_RECEIVE':\r\n            return {\r\n                region: action.region,\r\n                shares: action.shares,\r\n                isLoading: false\r\n            }\r\n        default: return state\r\n    }\r\n}","E:\\git\\xplatform\\client-app\\src\\components\\imageViewer\\index.tsx",["149","150","151","152","153"],"import React, { useState, useRef, useEffect } from \"react\";\r\n\r\ninterface IViewerProps {}\r\n\r\nconst ImageViewer: React.FC<IViewerProps> = ({}) => {\r\n  const ref = React.createRef<HTMLImageElement>();\r\n\r\n  function zoom(e: React.WheelEvent<HTMLImageElement>) {\r\n    console.log(e.deltaY);\r\n\r\n    ref.current?.setAttribute(\"style\", \"width: 100%;transform: scale(0.5)\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"imageViewer\">\r\n      <img\r\n        ref={ref}\r\n        src=\"https://i.pinimg.com/originals/3b/8a/d2/3b8ad2c7b1be2caf24321c852103598a.jpg\"\r\n        style={{ width: \"100%\" }}\r\n        onWheel={zoom}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageViewer;\r\n","E:\\git\\xplatform\\client-app\\src\\components\\deals\\EditDealDialog.tsx",[],"E:\\git\\xplatform\\client-app\\src\\components\\deals\\DealForm.tsx",["154","155","156","157","158","159","160","161","162","163","164"],"import React, { useState, useEffect } from \"react\";\r\nimport { Field, change, reduxForm, formValueSelector } from \"redux-form\";\r\nimport { connect } from \"react-redux\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { green, red } from \"@material-ui/core/colors\";\r\nimport Radio, { RadioProps } from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport {\r\n  createStyles,\r\n  makeStyles,\r\n  Theme,\r\n  withStyles,\r\n} from \"@material-ui/core/styles\";\r\nimport { KeyboardDatePicker, KeyboardTimePicker } from \"@material-ui/pickers\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { SecuritiesState, Security, Share, Bond } from \"../../store/Securities\";\r\n\r\nimport NumberFormat from \"react-number-format\";\r\n\r\nimport {renderTextField} from \"xplatform-controls\"\r\n\r\ninterface NumberFormatCustomProps {\r\n  inputRef: (instance: NumberFormat | null) => void;\r\n  //onChange: (event: { target: { value: string } }) => void;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\nfunction NumberFormatCustom(props: NumberFormatCustomProps) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange(values.value);\r\n      }}\r\n      isNumericString\r\n    />\r\n  );\r\n}\r\n\r\n/*const renderTextField: React.FC<TFProps> = (props) => {\r\n  const {\r\n    input,\r\n    label,\r\n    meta: { touched, invalid, error },\r\n    ...custom\r\n  } = props;\r\n  return (\r\n    <TextField\r\n      label={label}\r\n      placeholder={label}\r\n      error={touched && invalid}\r\n      helperText={touched && error}\r\n      {...input}\r\n      {...custom}\r\n    />\r\n  );\r\n};*/\r\n\r\nconst GreenRadio = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    \"&$checked\": {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})((props: RadioProps) => <Radio color=\"default\" {...props} />);\r\n\r\nconst RedRadio = withStyles({\r\n  root: {\r\n    color: red[400],\r\n    \"&$checked\": {\r\n      color: red[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})((props: RadioProps) => <Radio color=\"default\" {...props} />);\r\n\r\n\r\n\r\ninterface SelectProps {\r\n  label: any;\r\n  input: any;\r\n  meta: any;\r\n  children: any;\r\n  custom: any;\r\n}\r\n\r\nconst renderSelectField: React.FC<SelectProps> = (props) => {\r\n  const {\r\n    input,\r\n    label,\r\n    meta: { touched, error },\r\n    children,\r\n    ...custom\r\n  } = props;\r\n\r\n  return (\r\n    <FormControl error={touched && error} {...custom}>\r\n      <InputLabel htmlFor=\"age-native-simple\">{label}</InputLabel>\r\n      <Select\r\n        {...input}\r\n        inputProps={{\r\n          name: \"age\",\r\n          id: \"age-native-simple\",\r\n        }}\r\n      >\r\n        {children}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\ntype OperProps = {\r\n  input: any;\r\n  rest: any;\r\n};\r\n\r\nconst radioButton = ({ input, ...rest }: OperProps) => (\r\n  <FormControl>\r\n    <FormLabel component=\"legend\">Operation</FormLabel>\r\n    <RadioGroup {...input} {...rest} defaultValue=\"1\">\r\n      <FormControlLabel\r\n        value=\"1\"\r\n        control={<GreenRadio />}\r\n        label=\"Buy\"\r\n        labelPlacement=\"end\"\r\n      />\r\n      <FormControlLabel\r\n        value=\"2\"\r\n        control={<Radio />}\r\n        label=\"Sell\"\r\n        labelPlacement=\"end\"\r\n      />\r\n    </RadioGroup>\r\n  </FormControl>\r\n);\r\n\r\nconst DateField = (props: any) => {\r\n  const {\r\n    meta: { submitting, error, touched },\r\n    input: { onBlur, value, ...inputProps },\r\n    ...others\r\n  } = props;\r\n\r\n  const onChange = (date: any) => {\r\n    Date.parse(date)\r\n      ? inputProps.onChange(date.toISOString())\r\n      : inputProps.onChange(null);\r\n  };\r\n\r\n  return (\r\n    <KeyboardDatePicker\r\n      {...inputProps}\r\n      {...others}\r\n      disableToolbar\r\n      format=\"dd/MM/yyyy\"\r\n      value={value ? new Date(value) : null}\r\n      disabled={submitting}\r\n      onBlur={() => onBlur(value ? new Date(value).toISOString() : null)}\r\n      error={error && touched}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nconst TimeField = (props: any) => {\r\n  const {\r\n    meta: { submitting, error, touched },\r\n    input: { onBlur, value, ...inputProps },\r\n    ...others\r\n  } = props;\r\n\r\n  const onChange = (date: any) => {\r\n    Date.parse(date)\r\n      ? inputProps.onChange(date.toISOString())\r\n      : inputProps.onChange(null);\r\n  };\r\n\r\n  return (\r\n    <KeyboardTimePicker\r\n      {...inputProps}\r\n      {...others}\r\n      disableToolbar\r\n      value={value ? new Date(value) : null}\r\n      disabled={submitting}\r\n      onBlur={() => onBlur(value ? new Date(value).toISOString() : null)}\r\n      error={error && touched}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nconst required = (value: any) =>\r\n  value || typeof value === \"number\" ? undefined : \"Required\";\r\n\r\nconst DealForm = (props: any) => {\r\n  const { handleSubmit, accounts = [], securities = [] } = props;\r\n\r\n  //props.touch(\"dealNumber\");\r\n\r\n  const [value, setValue] = React.useState<number>(0);\r\n  const [value2, setValue2] = React.useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    console.log(\"change\");\r\n\r\n    props.dispatch(change(\"dealForm\", \"dealVolume\", value));\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"change\");\r\n\r\n    props.dispatch(change(\"dealForm\", \"dealVolume\", value2));\r\n  }, [value2]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Grid container justify=\"flex-start\" spacing={3}>\r\n        <Grid item xs={3}>\r\n          <Field\r\n            fullWidth\r\n            name=\"dealNumber\"\r\n            component={renderTextField}\r\n            label=\"Number\"\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n            validate={required}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            name=\"dealAccount\"\r\n            component={renderSelectField}\r\n            label=\"Account\"\r\n            fullWidth\r\n          >\r\n            {accounts.map((s: any) => (\r\n              <MenuItem key={s.id} value={s.id}>\r\n                {s.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Field>\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            name=\"dealSecurity\"\r\n            component={renderSelectField}\r\n            label=\"Security\"\r\n            fullWidth\r\n          >\r\n            {securities.map((s: any) => (\r\n              <MenuItem key={s.id} value={s.id}>\r\n                {s.name}\r\n              </MenuItem>\r\n            ))}\r\n          </Field>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container justify=\"flex-start\" spacing={3}>\r\n        <Grid item xs={3}>\r\n          <Field name=\"dealOperation\" component={radioButton} row />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container justify=\"flex-start\" spacing={3}>\r\n        <Grid item xs={3}>\r\n          <Field\r\n            name=\"dealDate\"\r\n            component={DateField}\r\n            fullWidth\r\n            label=\"Deal Date\"\r\n            variant=\"inline\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            name=\"dealTime\"\r\n            component={TimeField}\r\n            ampm={false}\r\n            variant=\"inline\"\r\n            fullWidth\r\n            label=\"Deal Time\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            name=\"deliveryDate\"\r\n            component={DateField}\r\n            fullWidth\r\n            label=\"Delivery Date\"\r\n            variant=\"inline\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container justify=\"flex-start\" spacing={3}>\r\n        <Grid item xs={3}>\r\n          <Field\r\n            fullWidth\r\n            name=\"dealPrice\"\r\n            component={renderTextField}\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n            label=\"Price\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            fullWidth\r\n            name=\"dealCount\"\r\n            component={renderTextField}\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n            label=\"Count\"\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            fullWidth\r\n            name=\"dealNkd\"\r\n            component={renderTextField}\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n            label=\"NKD\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container justify=\"flex-start\" spacing={3}>\r\n        <Grid item xs={6}>\r\n          {props.nominalPrice ? `nominal price:${props.nominalPrice}` : null}\r\n        </Grid>\r\n\r\n        <Grid item xs={3}>\r\n          <Field\r\n            fullWidth\r\n            disabled\r\n            name=\"dealVolume\"\r\n            component={renderTextField}\r\n            InputProps={{\r\n              inputComponent: NumberFormatCustom as any,\r\n            }}\r\n            label=\"Volume\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <div>\r\n        <Button color=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n        <Button\r\n          color=\"secondary\"\r\n          onClick={() => {\r\n            setValue(10);\r\n          }}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst SelectingDealForm = reduxForm({\r\n  // a unique name for the form\r\n  form: \"dealForm\",\r\n})(DealForm);\r\n\r\nconst selector = formValueSelector(\"dealForm\"); // <-- same as form name\r\n\r\nexport default connect((state: ApplicationState) => {\r\n  const selectedSecurityId = selector(state, \"dealSecurity\");\r\n\r\n  const price = selector(state, \"dealPrice\");\r\n  const count = selector(state, \"dealCount\");\r\n\r\n  const getNominalPrice = (\r\n    securities: Security[] | undefined,\r\n    secId: number | undefined\r\n  ) => {\r\n    if (securities === undefined || secId === undefined) {\r\n      return 0;\r\n    }\r\n\r\n    const security = securities.find((s) => s.id === selectedSecurityId);\r\n\r\n    if (security?.type === \"bond\") {\r\n      return (security as Bond).nominalPrice;\r\n    }\r\n\r\n    return 0;\r\n  };\r\n\r\n  return {\r\n    securities: state.securities?.securities,\r\n    accounts: state.accounts?.accounts,\r\n    nominalPrice: getNominalPrice(\r\n      state.securities?.securities,\r\n      selectedSecurityId\r\n    ),\r\n    price: price,\r\n    count: count,\r\n    initialValues: {\r\n      dealOperation: \"1\",\r\n      dealDate: new Date().toISOString(),\r\n      deliveryDate: null,\r\n      //dealDate: \"lll\",\r\n      dealTime: null,\r\n      nominalPrice: null,\r\n      dealVolume: null,\r\n    },\r\n  };\r\n})(SelectingDealForm);\r\n","E:\\git\\xplatform\\client-app\\src\\components\\tabs\\index.tsx",["165","166"],"import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nimport \"./tabs.scss\";\r\n\r\ninterface ITabsProps {\r\n  value: any;\r\n  children: React.ReactElement[];\r\n}\r\n\r\ninterface ITab {\r\n  label: string;\r\n  icon: string;\r\n  value: string;\r\n  active?: boolean;\r\n  onSelect?: (value: string) => void;\r\n}\r\n\r\nexport const Tab = (props: ITab) => {\r\n  function onClick() {\r\n    if (props.onSelect === undefined) return;\r\n\r\n    props.onSelect(props.value);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`${props.active === true ? \"active\" : null}`}\r\n      onClick={onClick}\r\n    >\r\n      <i className={`fa ${props.icon}`}></i>\r\n      {props.label}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Tabs: React.FC<ITabsProps> = (props) => {\r\n  const [activeTab, setActiveTab] = useState(props.value);\r\n\r\n  const values = props.children.map((child: any) => child.props.value);\r\n\r\n  const activeIndex = values.findIndex((v) => v === activeTab);\r\n\r\n  function onSelect(tab: string) {\r\n    setActiveTab(tab);\r\n  }\r\n\r\n  return (\r\n    <div className=\"tabs\">\r\n      <div className=\"tab-header\">\r\n        {props.children.map((child) =>\r\n          React.cloneElement(child, {\r\n            onSelect,\r\n            active: child.props.value === activeTab,\r\n          })\r\n        )}\r\n      </div>\r\n\r\n      <div\r\n        className=\"tab-indicator\"\r\n        style={{ left: `calc(calc(100% / ${values.length}) * ${activeIndex})` }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tabs;\r\n","E:\\git\\xplatform\\client-app\\src\\components\\dropdown\\index.tsx",["167"],"import { ArrowDropDown } from \"@material-ui/icons\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport \"./dropdown.css\";\r\n\r\ninterface IDropdownProps {\r\n  options: any;\r\n  id: any;\r\n  label: any;\r\n  prompt: string;\r\n  value: any;\r\n  onChange: (option: any) => void;\r\n}\r\n\r\nconst Dropdown: React.FC<IDropdownProps> = ({\r\n  options,\r\n  id,\r\n  label,\r\n  prompt,\r\n  value,\r\n  onChange,\r\n}) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [query, setQuery] = useState(\"\");\r\n  const ref = useRef(null);\r\n\r\n  useEffect(() => {\r\n    [\"click\", \"touched\"].forEach((e) => {\r\n      document.addEventListener(e, toggle);\r\n    });\r\n\r\n    return () =>\r\n      [\"click\", \"touched\"].forEach((e) => {\r\n        document.removeEventListener(e, toggle);\r\n      });\r\n  }, []);\r\n\r\n  function toggle(e: any) {\r\n    setOpen(e && e.target === ref.current);\r\n  }\r\n\r\n  function filter(options: any) {\r\n    return options.filter(\r\n      (option: any) =>\r\n        option[label].toLowerCase().indexOf(query.toLocaleLowerCase()) > -1\r\n    );\r\n  }\r\n\r\n  function displayValue() {\r\n    if (query.length > 0) return query;\r\n    if (value) return value[label];\r\n    return \"\";\r\n  }\r\n\r\n  function selectOption(option: any) {\r\n    setQuery(\"\");\r\n    onChange(option);\r\n    setOpen(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <div className=\"control\">\r\n        <div className=\"selected-value\">\r\n          <input\r\n            type=\"text\"\r\n            ref={ref}\r\n            placeholder={value ? value[label] : prompt}\r\n            value={displayValue()}\r\n            onChange={(e) => {\r\n              setQuery(e.target.value);\r\n              onChange(null);\r\n            }}\r\n            onClick={toggle}\r\n            onTouchEnd={toggle}\r\n          />\r\n        </div>\r\n        <div className={`arrow ${open ? \"open\" : null}`}></div>\r\n      </div>\r\n      <div className={`options ${open ? \"open\" : null}`}>\r\n        {filter(options).map((option: any) => (\r\n          <div\r\n            key={option[id]}\r\n            className={`option ${value === option ? \"selected\" : null}`}\r\n            onClick={() => selectOption(option)}\r\n            onTouchEnd={() => selectOption(option)}\r\n          >\r\n            {option[label]}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdown;\r\n","E:\\git\\xplatform\\client-app\\src\\components\\financials\\Financials.tsx",[],{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":6,"column":10,"nodeType":"174","messageId":"175","endLine":6,"endColumn":26},{"ruleId":"172","severity":1,"message":"176","line":2,"column":10,"nodeType":"174","messageId":"175","endLine":2,"endColumn":16},{"ruleId":"172","severity":1,"message":"177","line":3,"column":8,"nodeType":"174","messageId":"175","endLine":3,"endColumn":12},{"ruleId":"172","severity":1,"message":"178","line":6,"column":8,"nodeType":"174","messageId":"175","endLine":6,"endColumn":16},{"ruleId":"179","severity":1,"message":"180","line":19,"column":1,"nodeType":"181","endLine":32,"endColumn":3},{"ruleId":"172","severity":1,"message":"182","line":5,"column":7,"nodeType":"174","messageId":"175","endLine":5,"endColumn":18},{"ruleId":"179","severity":1,"message":"180","line":7,"column":1,"nodeType":"181","endLine":14,"endColumn":3},{"ruleId":"172","severity":1,"message":"183","line":8,"column":10,"nodeType":"174","messageId":"175","endLine":8,"endColumn":15},{"ruleId":"172","severity":1,"message":"184","line":8,"column":17,"nodeType":"174","messageId":"175","endLine":8,"endColumn":25},{"ruleId":"185","severity":1,"message":"186","line":5,"column":3,"nodeType":"187","messageId":"188","endLine":7,"endColumn":4},{"ruleId":"172","severity":1,"message":"189","line":4,"column":10,"nodeType":"174","messageId":"175","endLine":4,"endColumn":15},{"ruleId":"172","severity":1,"message":"190","line":10,"column":10,"nodeType":"174","messageId":"175","endLine":10,"endColumn":14},{"ruleId":"172","severity":1,"message":"191","line":12,"column":10,"nodeType":"174","messageId":"175","endLine":12,"endColumn":22},{"ruleId":"172","severity":1,"message":"192","line":12,"column":24,"nodeType":"174","messageId":"175","endLine":12,"endColumn":34},{"ruleId":"172","severity":1,"message":"193","line":5,"column":10,"nodeType":"174","messageId":"175","endLine":5,"endColumn":15},{"ruleId":"172","severity":1,"message":"194","line":17,"column":10,"nodeType":"174","messageId":"175","endLine":17,"endColumn":14},{"ruleId":"172","severity":1,"message":"195","line":18,"column":30,"nodeType":"174","messageId":"175","endLine":18,"endColumn":37},{"ruleId":"172","severity":1,"message":"196","line":37,"column":15,"nodeType":"174","messageId":"175","endLine":37,"endColumn":23},{"ruleId":"197","severity":1,"message":"198","line":60,"column":37,"nodeType":"199","messageId":"200","endLine":60,"endColumn":39},{"ruleId":"172","severity":1,"message":"196","line":36,"column":15,"nodeType":"174","messageId":"175","endLine":36,"endColumn":23},{"ruleId":"172","severity":1,"message":"201","line":1,"column":10,"nodeType":"174","messageId":"175","endLine":1,"endColumn":17},{"ruleId":"172","severity":1,"message":"202","line":3,"column":10,"nodeType":"174","messageId":"175","endLine":3,"endColumn":30},{"ruleId":"172","severity":1,"message":"196","line":41,"column":15,"nodeType":"174","messageId":"175","endLine":41,"endColumn":23},{"ruleId":"172","severity":1,"message":"196","line":41,"column":15,"nodeType":"174","messageId":"175","endLine":41,"endColumn":23},{"ruleId":"172","severity":1,"message":"203","line":1,"column":17,"nodeType":"174","messageId":"175","endLine":1,"endColumn":25},{"ruleId":"172","severity":1,"message":"204","line":1,"column":27,"nodeType":"174","messageId":"175","endLine":1,"endColumn":33},{"ruleId":"172","severity":1,"message":"205","line":1,"column":35,"nodeType":"174","messageId":"175","endLine":1,"endColumn":44},{"ruleId":"206","severity":1,"message":"207","line":5,"column":46,"nodeType":"208","messageId":"200","endLine":5,"endColumn":48},{"ruleId":"209","severity":1,"message":"210","line":16,"column":7,"nodeType":"211","endLine":21,"endColumn":9},{"ruleId":"172","severity":1,"message":"203","line":1,"column":17,"nodeType":"174","messageId":"175","endLine":1,"endColumn":25},{"ruleId":"172","severity":1,"message":"212","line":7,"column":3,"nodeType":"174","messageId":"175","endLine":7,"endColumn":12},{"ruleId":"172","severity":1,"message":"191","line":19,"column":3,"nodeType":"174","messageId":"175","endLine":19,"endColumn":15},{"ruleId":"172","severity":1,"message":"192","line":20,"column":3,"nodeType":"174","messageId":"175","endLine":20,"endColumn":13},{"ruleId":"172","severity":1,"message":"213","line":21,"column":3,"nodeType":"174","messageId":"175","endLine":21,"endColumn":8},{"ruleId":"172","severity":1,"message":"214","line":26,"column":10,"nodeType":"174","messageId":"175","endLine":26,"endColumn":25},{"ruleId":"172","severity":1,"message":"215","line":26,"column":37,"nodeType":"174","messageId":"175","endLine":26,"endColumn":42},{"ruleId":"172","severity":1,"message":"216","line":82,"column":7,"nodeType":"174","messageId":"175","endLine":82,"endColumn":15},{"ruleId":"172","severity":1,"message":"217","line":216,"column":18,"nodeType":"174","messageId":"175","endLine":216,"endColumn":27},{"ruleId":"218","severity":1,"message":"219","line":222,"column":6,"nodeType":"220","endLine":222,"endColumn":13,"suggestions":"221"},{"ruleId":"218","severity":1,"message":"219","line":228,"column":6,"nodeType":"220","endLine":228,"endColumn":14,"suggestions":"222"},{"ruleId":"172","severity":1,"message":"204","line":1,"column":27,"nodeType":"174","messageId":"175","endLine":1,"endColumn":33},{"ruleId":"172","severity":1,"message":"205","line":1,"column":35,"nodeType":"174","messageId":"175","endLine":1,"endColumn":44},{"ruleId":"172","severity":1,"message":"223","line":1,"column":10,"nodeType":"174","messageId":"175","endLine":1,"endColumn":23},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],"@typescript-eslint/no-unused-vars","'ApplicationState' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'logo' is defined but never used.","'Emitents' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'drawerWidth' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Field' is defined but never used.","'Deal' is defined but never used.","'createStyles' is defined but never used.","'makeStyles' is defined but never used.","'spawn' is defined but never used.","'type' is defined but never used.","'compose' is defined but never used.","'appState' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Refresh' is defined but never used.","'isTemplateExpression' is defined but never used.","'useState' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'TextField' is defined but never used.","'Theme' is defined but never used.","'SecuritiesState' is defined but never used.","'Share' is defined but never used.","'RedRadio' is assigned a value but never used.","'setValue2' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["226"],["227"],"'ArrowDropDown' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},"Update the dependencies array to be: [props, value]",{"range":"232","text":"233"},"Update the dependencies array to be: [props, value2]",{"range":"234","text":"235"},[5252,5259],"[props, value]",[5384,5392],"[props, value2]"]